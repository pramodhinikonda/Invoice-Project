import { OnChanges, OnDestroy, OnInit, EventEmitter } from '@angular/core';
import { Observable } from 'rxjs';
import { NgProgress } from './ng-progress.service';
import { NgProgressRef } from './ng-progress-ref';
import * as ɵngcc0 from '@angular/core';
export declare class NgProgressComponent implements OnInit, OnChanges, OnDestroy {
    private _ngProgress;
    private _started;
    private _completed;
    /** Progress bar worker */
    progressRef: NgProgressRef;
    /** Stream that emits progress state */
    state$: Observable<{
        active: boolean;
        transform: string;
    }>;
    /** Creates a new instance if id is not already exists */
    id: string;
    /** Initializes inputs from the global config */
    min: number;
    max: number;
    ease: string;
    color: string;
    speed: number;
    thick: boolean;
    fixed: boolean;
    meteor: boolean;
    spinner: boolean;
    trickleSpeed: number;
    debounceTime: number;
    trickleFunc: (n: number) => number;
    spinnerPosition: 'left' | 'right';
    direction: 'ltr+' | 'ltr-' | 'rtl+' | 'rtl-';
    started: EventEmitter<{}>;
    completed: EventEmitter<{}>;
    readonly isStarted: boolean;
    constructor(_ngProgress: NgProgress);
    ngOnChanges(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    start(): void;
    complete(): void;
    inc(n?: number): void;
    set(n: number): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgProgressComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NgProgressComponent, "ng-progress", never, { "id": "id"; "min": "min"; "max": "max"; "ease": "ease"; "color": "color"; "speed": "speed"; "thick": "thick"; "fixed": "fixed"; "meteor": "meteor"; "spinner": "spinner"; "trickleSpeed": "trickleSpeed"; "debounceTime": "debounceTime"; "trickleFunc": "trickleFunc"; "spinnerPosition": "spinnerPosition"; "direction": "direction"; }, { "started": "started"; "completed": "completed"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctcHJvZ3Jlc3MuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbIm5nLXByb2dyZXNzLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBOZ1Byb2dyZXNzIH0gZnJvbSAnLi9uZy1wcm9ncmVzcy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTmdQcm9ncmVzc1JlZiB9IGZyb20gJy4vbmctcHJvZ3Jlc3MtcmVmJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmdQcm9ncmVzc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG4gICAgcHJpdmF0ZSBfbmdQcm9ncmVzcztcclxuICAgIHByaXZhdGUgX3N0YXJ0ZWQ7XHJcbiAgICBwcml2YXRlIF9jb21wbGV0ZWQ7XHJcbiAgICAvKiogUHJvZ3Jlc3MgYmFyIHdvcmtlciAqL1xyXG4gICAgcHJvZ3Jlc3NSZWY6IE5nUHJvZ3Jlc3NSZWY7XHJcbiAgICAvKiogU3RyZWFtIHRoYXQgZW1pdHMgcHJvZ3Jlc3Mgc3RhdGUgKi9cclxuICAgIHN0YXRlJDogT2JzZXJ2YWJsZTx7XHJcbiAgICAgICAgYWN0aXZlOiBib29sZWFuO1xyXG4gICAgICAgIHRyYW5zZm9ybTogc3RyaW5nO1xyXG4gICAgfT47XHJcbiAgICAvKiogQ3JlYXRlcyBhIG5ldyBpbnN0YW5jZSBpZiBpZCBpcyBub3QgYWxyZWFkeSBleGlzdHMgKi9cclxuICAgIGlkOiBzdHJpbmc7XHJcbiAgICAvKiogSW5pdGlhbGl6ZXMgaW5wdXRzIGZyb20gdGhlIGdsb2JhbCBjb25maWcgKi9cclxuICAgIG1pbjogbnVtYmVyO1xyXG4gICAgbWF4OiBudW1iZXI7XHJcbiAgICBlYXNlOiBzdHJpbmc7XHJcbiAgICBjb2xvcjogc3RyaW5nO1xyXG4gICAgc3BlZWQ6IG51bWJlcjtcclxuICAgIHRoaWNrOiBib29sZWFuO1xyXG4gICAgZml4ZWQ6IGJvb2xlYW47XHJcbiAgICBtZXRlb3I6IGJvb2xlYW47XHJcbiAgICBzcGlubmVyOiBib29sZWFuO1xyXG4gICAgdHJpY2tsZVNwZWVkOiBudW1iZXI7XHJcbiAgICBkZWJvdW5jZVRpbWU6IG51bWJlcjtcclxuICAgIHRyaWNrbGVGdW5jOiAobjogbnVtYmVyKSA9PiBudW1iZXI7XHJcbiAgICBzcGlubmVyUG9zaXRpb246ICdsZWZ0JyB8ICdyaWdodCc7XHJcbiAgICBkaXJlY3Rpb246ICdsdHIrJyB8ICdsdHItJyB8ICdydGwrJyB8ICdydGwtJztcclxuICAgIHN0YXJ0ZWQ6IEV2ZW50RW1pdHRlcjx7fT47XHJcbiAgICBjb21wbGV0ZWQ6IEV2ZW50RW1pdHRlcjx7fT47XHJcbiAgICByZWFkb25seSBpc1N0YXJ0ZWQ6IGJvb2xlYW47XHJcbiAgICBjb25zdHJ1Y3RvcihfbmdQcm9ncmVzczogTmdQcm9ncmVzcyk7XHJcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xyXG4gICAgbmdPbkluaXQoKTogdm9pZDtcclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XHJcbiAgICBzdGFydCgpOiB2b2lkO1xyXG4gICAgY29tcGxldGUoKTogdm9pZDtcclxuICAgIGluYyhuPzogbnVtYmVyKTogdm9pZDtcclxuICAgIHNldChuOiBudW1iZXIpOiB2b2lkO1xyXG59XHJcbiJdfQ==