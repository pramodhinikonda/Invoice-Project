{"version":3,"file":"sweetalert2-ngx-sweetalert2.js","sources":["ng:/@sweetalert2/ngx-sweetalert2/swal-partial-targets.ts","ng:/@sweetalert2/ngx-sweetalert2/di.ts","ng:/@sweetalert2/ngx-sweetalert2/swal.component.ts","ng:/@sweetalert2/ngx-sweetalert2/swal.directive.ts","ng:/@sweetalert2/ngx-sweetalert2/swal-partial.component.ts","ng:/@sweetalert2/ngx-sweetalert2/swal-partial.directive.ts","ng:/@sweetalert2/ngx-sweetalert2/sweetalert2.module.ts"],"names":[],"mappings":"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APK,uBACV,KAAK;gBAOL,KAAK,rBAPK,2BACV,KAAK;gBAOL,KAAK,rBAPK,wBACV,KAAK;eAOL,KAAK,pBAPK,yBACV,KAAK;oBAOL,KAAK,zBAPK,wBACV,KAAK;oBAOL,KAAK,zBAPK,wBACV,KAAK;wBAOL,KAAK,7BAPK,0BACV,KAAK;kCAOL,lCAPU,6BACV,KAAK;AAMA,AANK,2BACV,KAAK;CAML,KAAK,NANK,uBACV,KAAK;UAML,KAAK,fANK,8BACV,KAAK;gBAML,KAAK,rBANK,wBACV,KAAK;2BAML,KAAK,hCANK,4BACV,KAAK;mCAML,KAAK,xCANK,oCACV,KAAK;kCAML,KAAK,vCANK,iCACV,KAAK;sCAML,tCANU,gCACV,KAAK;CAKA,yCACL,1CANU,oCACV,KAAK;CAKA,0CACL,3CANU,mCACV,KAAK;GAKA,yCACL,5CANU,oCACV,KAAK;GAKA,HALK,mCACV,KAAK;IAKL,KAAK,TALK,qCACV,KAAK;OAKL,KAAK,ZALK,oCACV,KAAK;IAKL,KAAK,TALK,qCACV,KAAK;AAKL,KAAK,oCACL,zCANU,oCACV,KAAK;AAKA,mCACL,KAAK,xCANK,yCACV,KAAK;4BAML,KAAK,jCANK,wCACV,KAAK;2BAML,KAAK,hCANK,iCACV,KAAK;gCAML,KAAK,rCANK,iCACV,KAAK;4BAML,KAAK,jCANK,+BACV,KAAK;wBAML,KAAK,7BANK,8BACV,KAAK;uBAML,KAAK,5BANK,kCACV,KAAK;mBAML,KAAK,xBANK,uCACV,KAAK;OAML,KAAK,kCACL,9CAPU,sCACV,KAAK;GAMA,HANK,6BACV,KAAK;IAML,KAAK,TANK,2BACV,KAAK;MAML,KAAK,XANK,6BACV,KAAK;QAML,KAAK,bANK,8BACV,KAAK;UAML,KAAK,fANK,2BACV,KAAK;iBAML,KAAK,tBANK,6BACV,KAAK;qBAML,KAAK,1BANK,mCACV,KAAK;eAML,KAAK,pBANK,6BACV,KAAK;kBAML,KAAK,vBANK,+BACV,KAAK;yBAML,KAAK,9BANK,gCACV,KAAK;iCAML,KAAK,tCANK,kCACV,KAAK;4BAWL,MAAM,lCAXI,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","sourcesContent":["import Swal from 'sweetalert2';\n\n/**\n * Represents an object of targets for <swal> partials (use with *swalPartial directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\nexport class SwalPartialTargets {\n    public readonly title = () => Swal.getTitle();\n\n    public readonly content = () => Swal.getContent();\n\n    public readonly actions = () => Swal.getActions();\n\n    public readonly confirmButton = () => Swal.getConfirmButton();\n\n    public readonly cancelButton = () => Swal.getCancelButton();\n\n    public readonly footer = () => Swal.getFooter();\n}\n","import { InjectionToken, Provider } from '@angular/core';\nimport { SweetAlertOptions } from 'sweetalert2';\n\nexport const SwalDefaults = new InjectionToken<SweetAlertOptions>('SwalDefaults');\n\nexport function swalDefaultsProvider(options: SweetAlertOptions = {}): Provider {\n    return {\n        provide: SwalDefaults,\n        useValue: options\n    };\n}\n","import {\n    ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnChanges, OnDestroy, Output, SimpleChanges\n} from '@angular/core';\nimport Swal, { SweetAlertOptions } from 'sweetalert2';\nimport { SwalDefaults } from './di';\nimport * as events from './swal-events';\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: onBeforeOpen, onOpen, and onClose (without \"on*\" prefix).\n *     However, preConfirm and inputValidtor are still @Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the Promise they must return.\n *\n * /!\\ You can notice that the SweetAlert2 `useRejections` and `expectRejections` are the only one to not have\n *     an @Input(). That's because they are deprecated and not using the default value of these parameters leads to\n *     clunky control flow. They are supported (use [options]=\"{}\"), but please don't use them.\n */\n@Component({\n    selector: 'swal',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalComponent implements OnChanges, OnDestroy {\n    // If Swal gets more than a hundred props, I'll write a code generator, I promise.\n    // And I always resolve() my promises.\n    @Input() public title: SweetAlertOptions['title'];\n    @Input() public titleText: SweetAlertOptions['titleText'];\n    @Input() public text: SweetAlertOptions['text'];\n    @Input() public html: SweetAlertOptions['html'];\n    @Input() public footer: SweetAlertOptions['footer'];\n    @Input() public type: SweetAlertOptions['type'];\n    @Input() public backdrop: SweetAlertOptions['backdrop'];\n    @Input() public toast: SweetAlertOptions['toast'];\n    @Input() public target: SweetAlertOptions['target'];\n    @Input() public input: SweetAlertOptions['input'];\n    @Input() public width: SweetAlertOptions['width'];\n    @Input() public padding: SweetAlertOptions['padding'];\n    @Input() public background: SweetAlertOptions['background'];\n    @Input() public position: SweetAlertOptions['position'];\n    @Input() public grow: SweetAlertOptions['grow'];\n    @Input() public customClass: SweetAlertOptions['customClass'];\n    @Input() public timer: SweetAlertOptions['timer'];\n    @Input() public animation: SweetAlertOptions['animation'];\n    @Input() public allowOutsideClick: SweetAlertOptions['allowOutsideClick'];\n    @Input() public allowEscapeKey: SweetAlertOptions['allowEscapeKey'];\n    @Input() public allowEnterKey: SweetAlertOptions['allowEnterKey'];\n    @Input() public showConfirmButton: SweetAlertOptions['showConfirmButton'];\n    @Input() public showCancelButton: SweetAlertOptions['showCancelButton'];\n    @Input() public confirmButtonText: SweetAlertOptions['confirmButtonText'];\n    @Input() public cancelButtonText: SweetAlertOptions['cancelButtonText'];\n    @Input() public confirmButtonColor: SweetAlertOptions['confirmButtonColor'];\n    @Input() public cancelButtonColor: SweetAlertOptions['cancelButtonColor'];\n    @Input() public confirmButtonClass: SweetAlertOptions['confirmButtonClass'];\n    @Input() public cancelButtonClass: SweetAlertOptions['cancelButtonClass'];\n    @Input() public confirmButtonAriaLabel: SweetAlertOptions['confirmButtonAriaLabel'];\n    @Input() public cancelButtonAriaLabel: SweetAlertOptions['cancelButtonAriaLabel'];\n    @Input() public buttonsStyling: SweetAlertOptions['buttonsStyling'];\n    @Input() public reverseButtons: SweetAlertOptions['reverseButtons'];\n    @Input() public focusConfirm: SweetAlertOptions['focusConfirm'];\n    @Input() public focusCancel: SweetAlertOptions['focusCancel'];\n    @Input() public showCloseButton: SweetAlertOptions['showCloseButton'];\n    @Input() public closeButtonAriaLabel: SweetAlertOptions['closeButtonAriaLabel'];\n    @Input() public showLoaderOnConfirm: SweetAlertOptions['showLoaderOnConfirm'];\n    @Input() public preConfirm: SweetAlertOptions['preConfirm'];\n    @Input() public imageUrl: SweetAlertOptions['imageUrl'];\n    @Input() public imageWidth: SweetAlertOptions['imageWidth'];\n    @Input() public imageHeight: SweetAlertOptions['imageHeight'];\n    @Input() public imageAlt: SweetAlertOptions['imageAlt'];\n    @Input() public imageClass: SweetAlertOptions['imageClass'];\n    @Input() public inputPlaceholder: SweetAlertOptions['inputPlaceholder'];\n    @Input() public inputValue: SweetAlertOptions['inputValue'];\n    @Input() public inputOptions: SweetAlertOptions['inputOptions'];\n    @Input() public inputAutoTrim: SweetAlertOptions['inputAutoTrim'];\n    @Input() public inputAttributes: SweetAlertOptions['inputAttributes'];\n    @Input() public inputValidator: SweetAlertOptions['inputValidator'];\n    @Input() public inputClass: SweetAlertOptions['inputClass'];\n    @Input() public progressSteps: SweetAlertOptions['progressSteps'];\n    @Input() public currentProgressStep: SweetAlertOptions['currentProgressStep'];\n    @Input() public progressStepsDistance: SweetAlertOptions['progressStepsDistance'];\n\n    /**\n     * Emits a BeforeOpenEvent when the modal DOM element has been created.\n     * Useful to perform DOM mutations before the modal is shown.\n     */\n    @Output() public readonly beforeOpen = new EventEmitter<events.BeforeOpenEvent>();\n\n    /**\n     * Emits an OpenEvent when the modal is shown.\n     */\n    @Output() public readonly open = new EventEmitter<events.OpenEvent>();\n\n    /**\n     * Emits a CloseEvent when modal get closed.\n     */\n    @Output() public readonly close = new EventEmitter<events.CloseEvent>();\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output() public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n     * value of a rejected \"preConfirm\".\n     *\n     * Example:\n     *     public handleCancel(reason: string): void {\n     *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n     *         // ... do something\n     *     }\n     */\n    @Output() public readonly cancel = new EventEmitter<any>();\n\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    @Input() public set options(options: SweetAlertOptions) {\n        Object.assign(this, options);\n        Object.keys(options).forEach(this.markTouched);\n    }\n\n    public get options(): SweetAlertOptions {\n        const options: SweetAlertOptions = {};\n\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        // That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially avoiding\n        // side effects.\n        this.touchedProps.forEach(prop => {\n            options[prop] = (this as { [prop: string]: any })[prop];\n        });\n\n        return options;\n    }\n\n    public nativeSwal = Swal;\n\n    private isCurrentlyShown = false;\n\n    private readonly touchedProps = new Set<keyof SweetAlertOptions>();\n\n    private readonly markTouched = this.touchedProps.add.bind(this.touchedProps);\n\n    public constructor(@Inject(SwalDefaults) private readonly defaultSwalOptions: SweetAlertOptions) {\n        //=> Force `this` scope of show() on this component\n        //   Useful for doing things like (click)=\"mySwal.show()\".\n        this.show = this.show.bind(this);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        Object.keys(changes)\n            .filter(prop => prop !== 'options')\n            .forEach(this.markTouched);\n    }\n\n    public ngOnDestroy(): void {\n        if (this.isCurrentlyShown) {\n            Swal.close();\n        }\n    }\n\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n     */\n    public show(): Promise<any> {\n        //=> Build the SweetAlert2 options\n        const options: SweetAlertOptions = {\n            //=> Merge with the default module-level options\n            ...this.defaultSwalOptions,\n\n            //=> Merge with calculated options set for that specific swal\n            ...this.options,\n\n            //=> Handle modal lifecycle events\n            onBeforeOpen: (modalElement) => {\n                this.beforeOpen.emit({ modalElement });\n            },\n\n            onOpen: (modalElement) => {\n                this.isCurrentlyShown = true;\n                this.open.emit({ modalElement });\n            },\n\n            onClose: (modalElement) => {\n                this.isCurrentlyShown = false;\n                this.close.emit({ modalElement });\n            }\n        };\n\n        //=> Show the Swal!\n        const promise = Swal.fire(options);\n\n        //=> Handle (confirm) and (cancel) @Outputs\n        // tslint:disable-next-line:no-string-literal\n        const useRejections = (options as { useRejections?: boolean }).useRejections;\n\n        promise.then(\n            result => {\n                if (useRejections) {\n                    this.confirm.emit(result);\n                } else if ('value' in result) {\n                    this.confirm.emit(result.value);\n                } else {\n                    this.cancel.emit(result.dismiss);\n                }\n            },\n            err => {\n                if (useRejections) {\n                    this.cancel.emit(err);\n                }\n            }\n        );\n\n        //=> Return the unaltered promise\n        return promise;\n    }\n}\n","import {\n    ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output,\n    ViewContainerRef\n} from '@angular/core';\nimport Swal, { SweetAlertArrayOptions, SweetAlertOptions } from 'sweetalert2';\nimport { SwalComponent } from './swal.component';\n\n/**\n * [swal] directive. It takes a value that defines the Sweet Alert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, type] - the type being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\n@Directive({\n    selector: '[swal]'\n})\nexport class SwalDirective implements OnInit, OnDestroy {\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    @Input() public set swal(options: SwalComponent | SweetAlertOptions | SweetAlertArrayOptions) {\n        if (options instanceof SwalComponent) {\n            this.swalInstance = options;\n        } else if (Array.isArray(options)) {\n            this.swalOptions = Swal.argsToParams(options);\n        } else {\n            this.swalOptions = options;\n        }\n    }\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output() public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n     * value of a rejected \"preConfirm\".\n     *\n     * Example:\n     *     public handleCancel(reason: string): void {\n     *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n     *         // ... do something\n     *     }\n     */\n    @Output() public readonly cancel = new EventEmitter<any>();\n\n    /**\n     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n     * options to it.\n     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n     */\n    private swalRef: ComponentRef<SwalComponent>;\n\n    /**\n     * An instance of the <swal> component that this directive controls.\n     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n     */\n    private swalInstance: SwalComponent;\n\n    /**\n     * Holds the native SweetAlert2 options.\n     * Empty when the user passed an existing SwalComponent instance.\n     */\n    private swalOptions: SweetAlertOptions;\n\n    public constructor(\n        private readonly viewContainerRef: ViewContainerRef,\n        private readonly resolver: ComponentFactoryResolver) {\n    }\n\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n     * (cancel) outputs to reemit on the directive.\n     */\n    public ngOnInit(): void {\n        if (!this.swalInstance) {\n            const factory = this.resolver.resolveComponentFactory(SwalComponent);\n\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent and unsubscribes from that component's (confirm) and (cancel).\n     */\n    public ngOnDestroy(): void {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    @HostListener('click', ['$event'])\n    public onHostClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n\n        if (this.swalOptions) {\n            this.swalInstance.options = this.swalOptions;\n        }\n\n        const confirmSub = this.swalInstance.confirm.asObservable().subscribe(v => this.confirm.emit(v));\n        const cancelSub = this.swalInstance.cancel.asObservable().subscribe(v => this.cancel.emit(v));\n\n        this.swalInstance.show().then(unsubscribe);\n\n        function unsubscribe() {\n            confirmSub.unsubscribe();\n            cancelSub.unsubscribe();\n        }\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPartialDirective for info about the covered feature.\n */\n@Component({\n    template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalPartialComponent {\n    @Input() public template: TemplateRef<any>;\n}\n","import {\n    ApplicationRef, ComponentFactoryResolver, ComponentRef, Directive, Host, Injector, Input, OnDestroy, OnInit,\n    TemplateRef\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SwalPartialTargets } from './swal-partial-targets';\nimport { SwalPartialComponent } from './swal-partial.component';\nimport { SwalComponent } from './swal.component';\n\n/**\n * A structural directive that lets you use Angular templates inside of Sweet Alerts.\n * There are different targetable zones in a Sweet Alert: title, content, confirmButton, cancelButton, buttonsWrapper.\n * The default target is the content zone.\n *\n * Usage in your component's TypeScript code-behind (if you use another target than \"content\"):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPartialTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPartial [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPartial=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\n@Directive({\n    selector: '[swalPartial]'\n})\nexport class SwalPartialDirective implements OnInit, OnDestroy {\n    /**\n     * Takes a \"partial target\" or nothing (will target main content zone by default).\n     *\n     * See the {@link SwalPartialTargets} service to see the available targets.\n     * See the class doc block for more informations.\n     */\n    @Input() public swalPartial: () => HTMLElement;\n\n    /**\n     * Holds the component reference of the controlled SwalPartialComponent to destroy it when no longer needed.\n     */\n    private partialRef: ComponentRef<SwalPartialComponent>;\n\n    private beforeOpenSubscription: Subscription;\n    private closeSubscription: Subscription;\n\n    constructor(\n        private readonly resolver: ComponentFactoryResolver,\n        private readonly injector: Injector,\n        private readonly app: ApplicationRef,\n        private readonly templateRef: TemplateRef<any>,\n        private readonly swalTargets: SwalPartialTargets,\n        @Host() private readonly swalComponent: SwalComponent) {\n    }\n\n    /**\n     * Subscribes to the the Sweet Alert appearance/disappearance to create/destroy the SwalPartialComponent that will\n     * receive the consumer's template.\n     */\n    public ngOnInit(): void {\n        this.beforeOpenSubscription = this.swalComponent.beforeOpen.asObservable().subscribe(() => {\n            //=> Create the SwalPartialComponent on the target DOM node in the Sweet Alert\n            const targetEl = this.swalPartial ? this.swalPartial() : this.swalTargets.content();\n            const factory = this.resolver.resolveComponentFactory(SwalPartialComponent);\n\n            this.partialRef = factory.create(this.injector, [], targetEl);\n\n            //=> Apply the consumer's template on the component\n            this.partialRef.instance.template = this.templateRef;\n\n            //=> Make the Angular app aware of that detached view so change detection works\n            this.app.attachView(this.partialRef.hostView);\n        });\n\n        this.closeSubscription = this.swalComponent.close.asObservable().subscribe(() => {\n            //=> Detach the partial component from the app and destroy it\n            this.app.detachView(this.partialRef.hostView);\n            this.partialRef.destroy();\n        });\n    }\n\n    /**\n     * Unsubscribes from the Sweet Alert appearance/disappearance.\n     */\n    public ngOnDestroy(): void {\n        this.beforeOpenSubscription.unsubscribe();\n        this.closeSubscription.unsubscribe();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { SweetAlertOptions } from 'sweetalert2';\nimport { swalDefaultsProvider } from './di';\nimport { SwalPartialTargets } from './swal-partial-targets';\nimport { SwalPartialComponent } from './swal-partial.component';\nimport { SwalPartialDirective } from './swal-partial.directive';\nimport { SwalComponent } from './swal.component';\nimport { SwalDirective } from './swal.directive';\n\n@NgModule({\n    declarations: [\n        SwalComponent, SwalPartialDirective, SwalPartialComponent,\n        SwalDirective\n    ],\n    providers: [\n        SwalPartialTargets\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        SwalComponent, SwalPartialDirective,\n        SwalDirective\n    ],\n    entryComponents: [\n        SwalComponent, SwalPartialComponent\n    ]\n})\nexport class SweetAlert2Module {\n    public static forRoot(defaultSwalOptions?: SweetAlertOptions): ModuleWithProviders {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [swalDefaultsProvider(defaultSwalOptions)]\n        };\n    }\n}\n"]}