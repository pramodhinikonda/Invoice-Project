import { __assign } from 'tslib';
import Swal from 'sweetalert2';
import { CommonModule } from '@angular/common';
import { InjectionToken, ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output, ComponentFactoryResolver, Directive, HostListener, ViewContainerRef, TemplateRef, ApplicationRef, Host, Injector, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * Represents an object of targets for <swal> partials (use with *swalPartial directive).
 * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is
 * shown, so this object lets us reference those functions safely and in a statically-typed manner.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function SwalPartialComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0);
} }
var  /**
 * Represents an object of targets for <swal> partials (use with *swalPartial directive).
 * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is
 * shown, so this object lets us reference those functions safely and in a statically-typed manner.
 */
SwalPartialTargets = /** @class */ (function () {
    function SwalPartialTargets() {
        this.title = function () { return Swal.getTitle(); };
        this.content = function () { return Swal.getContent(); };
        this.actions = function () { return Swal.getActions(); };
        this.confirmButton = function () { return Swal.getConfirmButton(); };
        this.cancelButton = function () { return Swal.getCancelButton(); };
        this.footer = function () { return Swal.getFooter(); };
    }
SwalPartialTargets.ɵfac = function SwalPartialTargets_Factory(t) { return new (t || SwalPartialTargets)(); };
SwalPartialTargets.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: SwalPartialTargets, factory: function (t) { return SwalPartialTargets.ɵfac(t); } });

    return SwalPartialTargets;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var SwalDefaults = new InjectionToken('SwalDefaults');
/**
 * @param {?=} options
 * @return {?}
 */
function swalDefaultsProvider(options) {
    if (options === void 0) { options = {}; }
    return {
        provide: SwalDefaults,
        useValue: options
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * <swal> component. See the README.md for usage.
 *
 * It contains a bunch of \@Inputs that have a perfect 1:1 mapping with SweetAlert2 options.
 * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled
 * to SweetAlert2, but also is type-safe.
 *
 * /!\ Some SweetAlert options aren't \@Inputs but \@Outputs: onBeforeOpen, onOpen, and onClose (without "on*" prefix).
 *     However, preConfirm and inputValidtor are still \@Inputs because there are not event handlers, there can't be
 *     multiple listeners and we need the Promise they must return.
 *
 * /!\ You can notice that the SweetAlert2 `useRejections` and `expectRejections` are the only one to not have
 *     an \@Input(). That's because they are deprecated and not using the default value of these parameters leads to
 *     clunky control flow. They are supported (use [options]="{}"), but please don't use them.
 */
var SwalComponent = /** @class */ (function () {
    function SwalComponent(defaultSwalOptions) {
        this.defaultSwalOptions = defaultSwalOptions;
        /**
         * Emits a BeforeOpenEvent when the modal DOM element has been created.
         * Useful to perform DOM mutations before the modal is shown.
         */
        this.beforeOpen = new EventEmitter();
        /**
         * Emits an OpenEvent when the modal is shown.
         */
        this.open = new EventEmitter();
        /**
         * Emits a CloseEvent when modal get closed.
         */
        this.close = new EventEmitter();
        /**
         * Emits when the user clicks "Confirm".
         * Bears a value when using "input", resolved "preConfirm", etc.
         *
         * Example:
         *     public handleConfirm(email: string): void {
         *         // ... save user email
         *     }
         */
        this.confirm = new EventEmitter();
        /**
         * Emits when the user clicks "Cancel" (or dismisses the modal by any other way).
         * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the
         * value of a rejected "preConfirm".
         *
         * Example:
         *     public handleCancel(reason: string): void {
         *         // reason can be 'cancel', 'overlay', 'close', and 'timer'
         *         // ... do something
         *     }
         */
        this.cancel = new EventEmitter();
        this.nativeSwal = Swal;
        this.isCurrentlyShown = false;
        this.touchedProps = new Set();
        this.markTouched = this.touchedProps.add.bind(this.touchedProps);
        //=> Force `this` scope of show() on this component
        //   Useful for doing things like (click)="mySwal.show()".
        this.show = this.show.bind(this);
    }
    Object.defineProperty(SwalComponent.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var options = {};
            //=> We will compute the options object based on the option keys that are known to have changed.
            // That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially avoiding
            // side effects.
            this.touchedProps.forEach(function (prop) {
                options[prop] = ((/** @type {?} */ (_this)))[prop];
            });
            return options;
        },
        /**
         * An object of SweetAlert2 native options, useful if:
         *  - you don't want to use the @Inputs for practical/philosophical reasons ;
         *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.
         *
         * /!\ Be aware that the options defined in this object will override the @Inputs of the same name.
         */
        set: /**
         * An object of SweetAlert2 native options, useful if:
         *  - you don't want to use the \@Inputs for practical/philosophical reasons ;
         *  - there are missing \@Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.
         *
         * /!\ Be aware that the options defined in this object will override the \@Inputs of the same name.
         * @param {?} options
         * @return {?}
         */
        function (options) {
            Object.assign(this, options);
            Object.keys(options).forEach(this.markTouched);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} changes
     * @return {?}
     */
    SwalComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        Object.keys(changes)
            .filter(function (prop) { return prop !== 'options'; })
            .forEach(this.markTouched);
    };
    /**
     * @return {?}
     */
    SwalComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.isCurrentlyShown) {
            Swal.close();
        }
    };
    /**
     * Shows the SweetAlert.
     *
     * Returns the SweetAlert2 promise for convenience and use in code behind templates.
     * Otherwise, (confirm)="myHandler($event)" and (cancel)="myHandler($event)" can be used in templates.
     */
    /**
     * Shows the SweetAlert.
     *
     * Returns the SweetAlert2 promise for convenience and use in code behind templates.
     * Otherwise, (confirm)="myHandler($event)" and (cancel)="myHandler($event)" can be used in templates.
     * @return {?}
     */
    SwalComponent.prototype.show = /**
     * Shows the SweetAlert.
     *
     * Returns the SweetAlert2 promise for convenience and use in code behind templates.
     * Otherwise, (confirm)="myHandler($event)" and (cancel)="myHandler($event)" can be used in templates.
     * @return {?}
     */
    function () {
        var _this = this;
        //=> Build the SweetAlert2 options
        /** @type {?} */
        var options = __assign({}, this.defaultSwalOptions, this.options, { onBeforeOpen: function (modalElement) {
                _this.beforeOpen.emit({ modalElement: modalElement });
            }, onOpen: function (modalElement) {
                _this.isCurrentlyShown = true;
                _this.open.emit({ modalElement: modalElement });
            }, onClose: function (modalElement) {
                _this.isCurrentlyShown = false;
                _this.close.emit({ modalElement: modalElement });
            } });
        //=> Show the Swal!
        /** @type {?} */
        var promise = Swal.fire(options);
        //=> Handle (confirm) and (cancel) @Outputs
        // tslint:disable-next-line:no-string-literal
        /** @type {?} */
        var useRejections = ((/** @type {?} */ (options))).useRejections;
        promise.then(function (result) {
            if (useRejections) {
                _this.confirm.emit(result);
            }
            else if ('value' in result) {
                _this.confirm.emit(result.value);
            }
            else {
                _this.cancel.emit(result.dismiss);
            }
        }, function (err) {
            if (useRejections) {
                _this.cancel.emit(err);
            }
        });
        //=> Return the unaltered promise
        return promise;
    };
    /** @nocollapse */
    SwalComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [SwalDefaults,] }] }
    ]; };
    SwalComponent.propDecorators = {
        title: [{ type: Input }],
        titleText: [{ type: Input }],
        text: [{ type: Input }],
        html: [{ type: Input }],
        footer: [{ type: Input }],
        type: [{ type: Input }],
        backdrop: [{ type: Input }],
        toast: [{ type: Input }],
        target: [{ type: Input }],
        input: [{ type: Input }],
        width: [{ type: Input }],
        padding: [{ type: Input }],
        background: [{ type: Input }],
        position: [{ type: Input }],
        grow: [{ type: Input }],
        customClass: [{ type: Input }],
        timer: [{ type: Input }],
        animation: [{ type: Input }],
        allowOutsideClick: [{ type: Input }],
        allowEscapeKey: [{ type: Input }],
        allowEnterKey: [{ type: Input }],
        showConfirmButton: [{ type: Input }],
        showCancelButton: [{ type: Input }],
        confirmButtonText: [{ type: Input }],
        cancelButtonText: [{ type: Input }],
        confirmButtonColor: [{ type: Input }],
        cancelButtonColor: [{ type: Input }],
        confirmButtonClass: [{ type: Input }],
        cancelButtonClass: [{ type: Input }],
        confirmButtonAriaLabel: [{ type: Input }],
        cancelButtonAriaLabel: [{ type: Input }],
        buttonsStyling: [{ type: Input }],
        reverseButtons: [{ type: Input }],
        focusConfirm: [{ type: Input }],
        focusCancel: [{ type: Input }],
        showCloseButton: [{ type: Input }],
        closeButtonAriaLabel: [{ type: Input }],
        showLoaderOnConfirm: [{ type: Input }],
        preConfirm: [{ type: Input }],
        imageUrl: [{ type: Input }],
        imageWidth: [{ type: Input }],
        imageHeight: [{ type: Input }],
        imageAlt: [{ type: Input }],
        imageClass: [{ type: Input }],
        inputPlaceholder: [{ type: Input }],
        inputValue: [{ type: Input }],
        inputOptions: [{ type: Input }],
        inputAutoTrim: [{ type: Input }],
        inputAttributes: [{ type: Input }],
        inputValidator: [{ type: Input }],
        inputClass: [{ type: Input }],
        progressSteps: [{ type: Input }],
        currentProgressStep: [{ type: Input }],
        progressStepsDistance: [{ type: Input }],
        beforeOpen: [{ type: Output }],
        open: [{ type: Output }],
        close: [{ type: Output }],
        confirm: [{ type: Output }],
        cancel: [{ type: Output }],
        options: [{ type: Input }]
    };
SwalComponent.ɵfac = function SwalComponent_Factory(t) { return new (t || SwalComponent)(ɵngcc0.ɵɵdirectiveInject(SwalDefaults)); };
SwalComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SwalComponent, selectors: [["swal"]], inputs: { options: "options", title: "title", titleText: "titleText", text: "text", html: "html", footer: "footer", type: "type", backdrop: "backdrop", toast: "toast", target: "target", input: "input", width: "width", padding: "padding", background: "background", position: "position", grow: "grow", customClass: "customClass", timer: "timer", animation: "animation", allowOutsideClick: "allowOutsideClick", allowEscapeKey: "allowEscapeKey", allowEnterKey: "allowEnterKey", showConfirmButton: "showConfirmButton", showCancelButton: "showCancelButton", confirmButtonText: "confirmButtonText", cancelButtonText: "cancelButtonText", confirmButtonColor: "confirmButtonColor", cancelButtonColor: "cancelButtonColor", confirmButtonClass: "confirmButtonClass", cancelButtonClass: "cancelButtonClass", confirmButtonAriaLabel: "confirmButtonAriaLabel", cancelButtonAriaLabel: "cancelButtonAriaLabel", buttonsStyling: "buttonsStyling", reverseButtons: "reverseButtons", focusConfirm: "focusConfirm", focusCancel: "focusCancel", showCloseButton: "showCloseButton", closeButtonAriaLabel: "closeButtonAriaLabel", showLoaderOnConfirm: "showLoaderOnConfirm", preConfirm: "preConfirm", imageUrl: "imageUrl", imageWidth: "imageWidth", imageHeight: "imageHeight", imageAlt: "imageAlt", imageClass: "imageClass", inputPlaceholder: "inputPlaceholder", inputValue: "inputValue", inputOptions: "inputOptions", inputAutoTrim: "inputAutoTrim", inputAttributes: "inputAttributes", inputValidator: "inputValidator", inputClass: "inputClass", progressSteps: "progressSteps", currentProgressStep: "currentProgressStep", progressStepsDistance: "progressStepsDistance" }, outputs: { beforeOpen: "beforeOpen", open: "open", close: "close", confirm: "confirm", cancel: "cancel" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function SwalComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SwalComponent, [{
        type: Component,
        args: [{
                selector: 'swal',
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [SwalDefaults]
            }] }]; }, { beforeOpen: [{
            type: Output
        }], open: [{
            type: Output
        }], close: [{
            type: Output
        }], confirm: [{
            type: Output
        }], cancel: [{
            type: Output
        }], options: [{
            type: Input
        }], title: [{
            type: Input
        }], titleText: [{
            type: Input
        }], text: [{
            type: Input
        }], html: [{
            type: Input
        }], footer: [{
            type: Input
        }], type: [{
            type: Input
        }], backdrop: [{
            type: Input
        }], toast: [{
            type: Input
        }], target: [{
            type: Input
        }], input: [{
            type: Input
        }], width: [{
            type: Input
        }], padding: [{
            type: Input
        }], background: [{
            type: Input
        }], position: [{
            type: Input
        }], grow: [{
            type: Input
        }], customClass: [{
            type: Input
        }], timer: [{
            type: Input
        }], animation: [{
            type: Input
        }], allowOutsideClick: [{
            type: Input
        }], allowEscapeKey: [{
            type: Input
        }], allowEnterKey: [{
            type: Input
        }], showConfirmButton: [{
            type: Input
        }], showCancelButton: [{
            type: Input
        }], confirmButtonText: [{
            type: Input
        }], cancelButtonText: [{
            type: Input
        }], confirmButtonColor: [{
            type: Input
        }], cancelButtonColor: [{
            type: Input
        }], confirmButtonClass: [{
            type: Input
        }], cancelButtonClass: [{
            type: Input
        }], confirmButtonAriaLabel: [{
            type: Input
        }], cancelButtonAriaLabel: [{
            type: Input
        }], buttonsStyling: [{
            type: Input
        }], reverseButtons: [{
            type: Input
        }], focusConfirm: [{
            type: Input
        }], focusCancel: [{
            type: Input
        }], showCloseButton: [{
            type: Input
        }], closeButtonAriaLabel: [{
            type: Input
        }], showLoaderOnConfirm: [{
            type: Input
        }], preConfirm: [{
            type: Input
        }], imageUrl: [{
            type: Input
        }], imageWidth: [{
            type: Input
        }], imageHeight: [{
            type: Input
        }], imageAlt: [{
            type: Input
        }], imageClass: [{
            type: Input
        }], inputPlaceholder: [{
            type: Input
        }], inputValue: [{
            type: Input
        }], inputOptions: [{
            type: Input
        }], inputAutoTrim: [{
            type: Input
        }], inputAttributes: [{
            type: Input
        }], inputValidator: [{
            type: Input
        }], inputClass: [{
            type: Input
        }], progressSteps: [{
            type: Input
        }], currentProgressStep: [{
            type: Input
        }], progressStepsDistance: [{
            type: Input
        }] }); })();
    return SwalComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * [swal] directive. It takes a value that defines the Sweet Alert and can be of three types:
 *
 * 1) A simple array of two or three strings defining [title, text, type] - the type being optional, ex:
 *
 *    <button [swal]="['Title', 'Text']">Click me</button>
 *
 * 2) A native SweetAlert2 options object, ex:
 *
 *    <button [swal]="{ title: 'Title', text: 'Text' }">Click me</button>
 *
 * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:
 *
 *    <button [swal]="mySwal">Click me</button>
 *    <swal #mySwal title="Title" text="Text"></swal>
 */
var SwalDirective = /** @class */ (function () {
    function SwalDirective(viewContainerRef, resolver) {
        this.viewContainerRef = viewContainerRef;
        this.resolver = resolver;
        /**
         * Emits when the user clicks "Confirm".
         * Bears a value when using "input", resolved "preConfirm", etc.
         *
         * Example:
         *     public handleConfirm(email: string): void {
         *         // ... save user email
         *     }
         */
        this.confirm = new EventEmitter();
        /**
         * Emits when the user clicks "Cancel" (or dismisses the modal by any other way).
         * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the
         * value of a rejected "preConfirm".
         *
         * Example:
         *     public handleCancel(reason: string): void {
         *         // reason can be 'cancel', 'overlay', 'close', and 'timer'
         *         // ... do something
         *     }
         */
        this.cancel = new EventEmitter();
    }
    Object.defineProperty(SwalDirective.prototype, "swal", {
        /**
         * SweetAlert2 options or a SwalComponent instance.
         * See the class doc block for more informations.
         */
        set: /**
         * SweetAlert2 options or a SwalComponent instance.
         * See the class doc block for more informations.
         * @param {?} options
         * @return {?}
         */
        function (options) {
            if (options instanceof SwalComponent) {
                this.swalInstance = options;
            }
            else if (Array.isArray(options)) {
                this.swalOptions = Swal.argsToParams(options);
            }
            else {
                this.swalOptions = options;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * OnInit lifecycle handler.
     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and
     * (cancel) outputs to reemit on the directive.
     */
    /**
     * OnInit lifecycle handler.
     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and
     * (cancel) outputs to reemit on the directive.
     * @return {?}
     */
    SwalDirective.prototype.ngOnInit = /**
     * OnInit lifecycle handler.
     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and
     * (cancel) outputs to reemit on the directive.
     * @return {?}
     */
    function () {
        if (!this.swalInstance) {
            /** @type {?} */
            var factory = this.resolver.resolveComponentFactory(SwalComponent);
            this.swalRef = this.viewContainerRef.createComponent(factory);
            this.swalInstance = this.swalRef.instance;
        }
    };
    /**
     * OnDestroy lifecycle handler.
     * Destroys the dynamically-created SwalComponent and unsubscribes from that component's (confirm) and (cancel).
     */
    /**
     * OnDestroy lifecycle handler.
     * Destroys the dynamically-created SwalComponent and unsubscribes from that component's (confirm) and (cancel).
     * @return {?}
     */
    SwalDirective.prototype.ngOnDestroy = /**
     * OnDestroy lifecycle handler.
     * Destroys the dynamically-created SwalComponent and unsubscribes from that component's (confirm) and (cancel).
     * @return {?}
     */
    function () {
        if (this.swalRef) {
            this.swalRef.destroy();
        }
    };
    /**
     * Click handler.
     * The directive listens for onclick events on its host element.
     * When this happens, it shows the <swal> attached to this directive.
     */
    /**
     * Click handler.
     * The directive listens for onclick events on its host element.
     * When this happens, it shows the <swal> attached to this directive.
     * @param {?} event
     * @return {?}
     */
    SwalDirective.prototype.onHostClicked = /**
     * Click handler.
     * The directive listens for onclick events on its host element.
     * When this happens, it shows the <swal> attached to this directive.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        event.preventDefault();
        event.stopImmediatePropagation();
        event.stopPropagation();
        if (this.swalOptions) {
            this.swalInstance.options = this.swalOptions;
        }
        /** @type {?} */
        var confirmSub = this.swalInstance.confirm.asObservable().subscribe(function (v) { return _this.confirm.emit(v); });
        /** @type {?} */
        var cancelSub = this.swalInstance.cancel.asObservable().subscribe(function (v) { return _this.cancel.emit(v); });
        this.swalInstance.show().then(unsubscribe);
        /**
         * @return {?}
         */
        function unsubscribe() {
            confirmSub.unsubscribe();
            cancelSub.unsubscribe();
        }
    };
    /** @nocollapse */
    SwalDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver }
    ]; };
    SwalDirective.propDecorators = {
        swal: [{ type: Input }],
        confirm: [{ type: Output }],
        cancel: [{ type: Output }],
        onHostClicked: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
SwalDirective.ɵfac = function SwalDirective_Factory(t) { return new (t || SwalDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };
SwalDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SwalDirective, selectors: [["", "swal", ""]], hostBindings: function SwalDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function SwalDirective_click_HostBindingHandler($event) { return ctx.onHostClicked($event); });
    } }, inputs: { swal: "swal" }, outputs: { confirm: "confirm", cancel: "cancel" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SwalDirective, [{
        type: Directive,
        args: [{
                selector: '[swal]'
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.ComponentFactoryResolver }]; }, { confirm: [{
            type: Output
        }], cancel: [{
            type: Output
        }], swal: [{
            type: Input
        }], onHostClicked: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
    return SwalDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * \@internal
 * Holds a consumer's Angular template and displays it on a Sweet Alert.
 * See SwalPartialDirective for info about the covered feature.
 */
var SwalPartialComponent = /** @class */ (function () {
    function SwalPartialComponent() {
    }
    SwalPartialComponent.propDecorators = {
        template: [{ type: Input }]
    };
SwalPartialComponent.ɵfac = function SwalPartialComponent_Factory(t) { return new (t || SwalPartialComponent)(); };
SwalPartialComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SwalPartialComponent, selectors: [["ng-component"]], inputs: { template: "template" }, decls: 1, vars: 1, consts: [[4, "ngTemplateOutlet"]], template: function SwalPartialComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SwalPartialComponent_ng_container_0_Template, 1, 0, "ng-container", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx.template);
    } }, directives: [ɵngcc1.NgTemplateOutlet], encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SwalPartialComponent, [{
        type: Component,
        args: [{
                template: '<ng-container *ngTemplateOutlet="template"></ng-container>',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return []; }, { template: [{
            type: Input
        }] }); })();
    return SwalPartialComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * A structural directive that lets you use Angular templates inside of Sweet Alerts.
 * There are different targetable zones in a Sweet Alert: title, content, confirmButton, cancelButton, buttonsWrapper.
 * The default target is the content zone.
 *
 * Usage in your component's TypeScript code-behind (if you use another target than "content"):
 *
 * \@Component({ ... })
 *     export class MyComponent {
 *         public constructor(public readonly swalTargets: SwalPartialTargets) {
 *         }
 *     }
 *
 * Usage in the template:
 *
 *     <swal title="Fill the form" (confirm)="confirmHandler()">
 *         <!-- This form will be displayed as the alert main content
 *              Targets the alert's main content zone by default -->
 *         <form *swalPartial [formControl]="myForm">
 *             ...
 *         </form>
 *
 *         <!-- This targets the confirm button's inner content
 *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->
 *         <ng-container *swalPartial="swalTargets.confirmButton">
 *              Send ({{ secondsLeft }} seconds left)
 *         </ng-container>
 *     <swal>
 */
var SwalPartialDirective = /** @class */ (function () {
    function SwalPartialDirective(resolver, injector, app, templateRef, swalTargets, swalComponent) {
        this.resolver = resolver;
        this.injector = injector;
        this.app = app;
        this.templateRef = templateRef;
        this.swalTargets = swalTargets;
        this.swalComponent = swalComponent;
    }
    /**
     * Subscribes to the the Sweet Alert appearance/disappearance to create/destroy the SwalPartialComponent that will
     * receive the consumer's template.
     */
    /**
     * Subscribes to the the Sweet Alert appearance/disappearance to create/destroy the SwalPartialComponent that will
     * receive the consumer's template.
     * @return {?}
     */
    SwalPartialDirective.prototype.ngOnInit = /**
     * Subscribes to the the Sweet Alert appearance/disappearance to create/destroy the SwalPartialComponent that will
     * receive the consumer's template.
     * @return {?}
     */
    function () {
        var _this = this;
        this.beforeOpenSubscription = this.swalComponent.beforeOpen.asObservable().subscribe(function () {
            //=> Create the SwalPartialComponent on the target DOM node in the Sweet Alert
            /** @type {?} */
            var targetEl = _this.swalPartial ? _this.swalPartial() : _this.swalTargets.content();
            /** @type {?} */
            var factory = _this.resolver.resolveComponentFactory(SwalPartialComponent);
            _this.partialRef = factory.create(_this.injector, [], targetEl);
            //=> Apply the consumer's template on the component
            _this.partialRef.instance.template = _this.templateRef;
            //=> Make the Angular app aware of that detached view so change detection works
            _this.app.attachView(_this.partialRef.hostView);
        });
        this.closeSubscription = this.swalComponent.close.asObservable().subscribe(function () {
            //=> Detach the partial component from the app and destroy it
            _this.app.detachView(_this.partialRef.hostView);
            _this.partialRef.destroy();
        });
    };
    /**
     * Unsubscribes from the Sweet Alert appearance/disappearance.
     */
    /**
     * Unsubscribes from the Sweet Alert appearance/disappearance.
     * @return {?}
     */
    SwalPartialDirective.prototype.ngOnDestroy = /**
     * Unsubscribes from the Sweet Alert appearance/disappearance.
     * @return {?}
     */
    function () {
        this.beforeOpenSubscription.unsubscribe();
        this.closeSubscription.unsubscribe();
    };
    /** @nocollapse */
    SwalPartialDirective.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ApplicationRef },
        { type: TemplateRef },
        { type: SwalPartialTargets },
        { type: SwalComponent, decorators: [{ type: Host }] }
    ]; };
    SwalPartialDirective.propDecorators = {
        swalPartial: [{ type: Input }]
    };
SwalPartialDirective.ɵfac = function SwalPartialDirective_Factory(t) { return new (t || SwalPartialDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ApplicationRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(SwalPartialTargets), ɵngcc0.ɵɵdirectiveInject(SwalComponent, 1)); };
SwalPartialDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SwalPartialDirective, selectors: [["", "swalPartial", ""]], inputs: { swalPartial: "swalPartial" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SwalPartialDirective, [{
        type: Directive,
        args: [{
                selector: '[swalPartial]'
            }]
    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.Injector }, { type: ɵngcc0.ApplicationRef }, { type: ɵngcc0.TemplateRef }, { type: SwalPartialTargets }, { type: SwalComponent, decorators: [{
                type: Host
            }] }]; }, { swalPartial: [{
            type: Input
        }] }); })();
    return SwalPartialDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var SweetAlert2Module = /** @class */ (function () {
    function SweetAlert2Module() {
    }
    /**
     * @param {?=} defaultSwalOptions
     * @return {?}
     */
    SweetAlert2Module.forRoot = /**
     * @param {?=} defaultSwalOptions
     * @return {?}
     */
    function (defaultSwalOptions) {
        return {
            ngModule: SweetAlert2Module,
            providers: [swalDefaultsProvider(defaultSwalOptions)]
        };
    };
SweetAlert2Module.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: SweetAlert2Module });
SweetAlert2Module.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function SweetAlert2Module_Factory(t) { return new (t || SweetAlert2Module)(); }, providers: [
        SwalPartialTargets
    ], imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(SweetAlert2Module, { declarations: function () { return [SwalComponent,
        SwalPartialDirective,
        SwalPartialComponent,
        SwalDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [SwalComponent,
        SwalPartialDirective,
        SwalDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SweetAlert2Module, [{
        type: NgModule,
        args: [{
                declarations: [
                    SwalComponent, SwalPartialDirective, SwalPartialComponent,
                    SwalDirective
                ],
                providers: [
                    SwalPartialTargets
                ],
                imports: [
                    CommonModule
                ],
                exports: [
                    SwalComponent, SwalPartialDirective,
                    SwalDirective
                ],
                entryComponents: [
                    SwalComponent, SwalPartialComponent
                ]
            }]
    }], function () { return []; }, null); })();
    return SweetAlert2Module;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { SwalPartialTargets, SwalComponent, SwalDirective, SwalPartialDirective, SweetAlert2Module, SwalDefaults as ɵa, swalDefaultsProvider as ɵb, SwalPartialComponent as ɵc };

//# sourceMappingURL=sweetalert2-ngx-sweetalert2.js.map