import { ApplicationRef, ComponentFactoryResolver, Injector, OnDestroy, OnInit, TemplateRef } from '@angular/core';
import { SwalPartialTargets } from './swal-partial-targets';
import { SwalComponent } from './swal.component';
/**
 * A structural directive that lets you use Angular templates inside of Sweet Alerts.
 * There are different targetable zones in a Sweet Alert: title, content, confirmButton, cancelButton, buttonsWrapper.
 * The default target is the content zone.
 *
 * Usage in your component's TypeScript code-behind (if you use another target than "content"):
 *
 *     @Component({ ... })
 *     export class MyComponent {
 *         public constructor(public readonly swalTargets: SwalPartialTargets) {
 *         }
 *     }
 *
 * Usage in the template:
 *
 *     <swal title="Fill the form" (confirm)="confirmHandler()">
 *         <!-- This form will be displayed as the alert main content
 *              Targets the alert's main content zone by default -->
 *         <form *swalPartial [formControl]="myForm">
 *             ...
 *         </form>
 *
 *         <!-- This targets the confirm button's inner content
 *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->
 *         <ng-container *swalPartial="swalTargets.confirmButton">
 *              Send ({{ secondsLeft }} seconds left)
 *         </ng-container>
 *     <swal>
 */
import * as ɵngcc0 from '@angular/core';
export declare class SwalPartialDirective implements OnInit, OnDestroy {
    private readonly resolver;
    private readonly injector;
    private readonly app;
    private readonly templateRef;
    private readonly swalTargets;
    private readonly swalComponent;
    /**
     * Takes a "partial target" or nothing (will target main content zone by default).
     *
     * See the {@link SwalPartialTargets} service to see the available targets.
     * See the class doc block for more informations.
     */
    swalPartial: () => HTMLElement;
    /**
     * Holds the component reference of the controlled SwalPartialComponent to destroy it when no longer needed.
     */
    private partialRef;
    private beforeOpenSubscription;
    private closeSubscription;
    constructor(resolver: ComponentFactoryResolver, injector: Injector, app: ApplicationRef, templateRef: TemplateRef<any>, swalTargets: SwalPartialTargets, swalComponent: SwalComponent);
    /**
     * Subscribes to the the Sweet Alert appearance/disappearance to create/destroy the SwalPartialComponent that will
     * receive the consumer's template.
     */
    ngOnInit(): void;
    /**
     * Unsubscribes from the Sweet Alert appearance/disappearance.
     */
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SwalPartialDirective, [null, null, null, null, null, { host: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SwalPartialDirective, "[swalPartial]", never, { "swalPartial": "swalPartial"; }, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhbC1wYXJ0aWFsLmRpcmVjdGl2ZS5kLnRzIiwic291cmNlcyI6WyJzd2FsLXBhcnRpYWwuZGlyZWN0aXZlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwbGljYXRpb25SZWYsIENvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgSW5qZWN0b3IsIE9uRGVzdHJveSwgT25Jbml0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3dhbFBhcnRpYWxUYXJnZXRzIH0gZnJvbSAnLi9zd2FsLXBhcnRpYWwtdGFyZ2V0cyc7XG5pbXBvcnQgeyBTd2FsQ29tcG9uZW50IH0gZnJvbSAnLi9zd2FsLmNvbXBvbmVudCc7XG4vKipcbiAqIEEgc3RydWN0dXJhbCBkaXJlY3RpdmUgdGhhdCBsZXRzIHlvdSB1c2UgQW5ndWxhciB0ZW1wbGF0ZXMgaW5zaWRlIG9mIFN3ZWV0IEFsZXJ0cy5cbiAqIFRoZXJlIGFyZSBkaWZmZXJlbnQgdGFyZ2V0YWJsZSB6b25lcyBpbiBhIFN3ZWV0IEFsZXJ0OiB0aXRsZSwgY29udGVudCwgY29uZmlybUJ1dHRvbiwgY2FuY2VsQnV0dG9uLCBidXR0b25zV3JhcHBlci5cbiAqIFRoZSBkZWZhdWx0IHRhcmdldCBpcyB0aGUgY29udGVudCB6b25lLlxuICpcbiAqIFVzYWdlIGluIHlvdXIgY29tcG9uZW50J3MgVHlwZVNjcmlwdCBjb2RlLWJlaGluZCAoaWYgeW91IHVzZSBhbm90aGVyIHRhcmdldCB0aGFuIFwiY29udGVudFwiKTpcbiAqXG4gKiAgICAgQENvbXBvbmVudCh7IC4uLiB9KVxuICogICAgIGV4cG9ydCBjbGFzcyBNeUNvbXBvbmVudCB7XG4gKiAgICAgICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgc3dhbFRhcmdldHM6IFN3YWxQYXJ0aWFsVGFyZ2V0cykge1xuICogICAgICAgICB9XG4gKiAgICAgfVxuICpcbiAqIFVzYWdlIGluIHRoZSB0ZW1wbGF0ZTpcbiAqXG4gKiAgICAgPHN3YWwgdGl0bGU9XCJGaWxsIHRoZSBmb3JtXCIgKGNvbmZpcm0pPVwiY29uZmlybUhhbmRsZXIoKVwiPlxuICogICAgICAgICA8IS0tIFRoaXMgZm9ybSB3aWxsIGJlIGRpc3BsYXllZCBhcyB0aGUgYWxlcnQgbWFpbiBjb250ZW50XG4gKiAgICAgICAgICAgICAgVGFyZ2V0cyB0aGUgYWxlcnQncyBtYWluIGNvbnRlbnQgem9uZSBieSBkZWZhdWx0IC0tPlxuICogICAgICAgICA8Zm9ybSAqc3dhbFBhcnRpYWwgW2Zvcm1Db250cm9sXT1cIm15Rm9ybVwiPlxuICogICAgICAgICAgICAgLi4uXG4gKiAgICAgICAgIDwvZm9ybT5cbiAqXG4gKiAgICAgICAgIDwhLS0gVGhpcyB0YXJnZXRzIHRoZSBjb25maXJtIGJ1dHRvbidzIGlubmVyIGNvbnRlbnRcbiAqICAgICAgICAgICAgICBOb3RpY2UgdGhlIHVzYWdlIG9mIG5nLWNvbnRhaW5lciB0byBhdm9pZCBjcmVhdGluZyBhbiB1c2VsZXNzIERPTSBlbGVtZW50IGluc2lkZSB0aGUgYnV0dG9uIC0tPlxuICogICAgICAgICA8bmctY29udGFpbmVyICpzd2FsUGFydGlhbD1cInN3YWxUYXJnZXRzLmNvbmZpcm1CdXR0b25cIj5cbiAqICAgICAgICAgICAgICBTZW5kICh7eyBzZWNvbmRzTGVmdCB9fSBzZWNvbmRzIGxlZnQpXG4gKiAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICogICAgIDxzd2FsPlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBTd2FsUGFydGlhbERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHJlc29sdmVyO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgaW5qZWN0b3I7XG4gICAgcHJpdmF0ZSByZWFkb25seSBhcHA7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0ZW1wbGF0ZVJlZjtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN3YWxUYXJnZXRzO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc3dhbENvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBUYWtlcyBhIFwicGFydGlhbCB0YXJnZXRcIiBvciBub3RoaW5nICh3aWxsIHRhcmdldCBtYWluIGNvbnRlbnQgem9uZSBieSBkZWZhdWx0KS5cbiAgICAgKlxuICAgICAqIFNlZSB0aGUge0BsaW5rIFN3YWxQYXJ0aWFsVGFyZ2V0c30gc2VydmljZSB0byBzZWUgdGhlIGF2YWlsYWJsZSB0YXJnZXRzLlxuICAgICAqIFNlZSB0aGUgY2xhc3MgZG9jIGJsb2NrIGZvciBtb3JlIGluZm9ybWF0aW9ucy5cbiAgICAgKi9cbiAgICBzd2FsUGFydGlhbDogKCkgPT4gSFRNTEVsZW1lbnQ7XG4gICAgLyoqXG4gICAgICogSG9sZHMgdGhlIGNvbXBvbmVudCByZWZlcmVuY2Ugb2YgdGhlIGNvbnRyb2xsZWQgU3dhbFBhcnRpYWxDb21wb25lbnQgdG8gZGVzdHJveSBpdCB3aGVuIG5vIGxvbmdlciBuZWVkZWQuXG4gICAgICovXG4gICAgcHJpdmF0ZSBwYXJ0aWFsUmVmO1xuICAgIHByaXZhdGUgYmVmb3JlT3BlblN1YnNjcmlwdGlvbjtcbiAgICBwcml2YXRlIGNsb3NlU3Vic2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKHJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIGluamVjdG9yOiBJbmplY3RvciwgYXBwOiBBcHBsaWNhdGlvblJlZiwgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sIHN3YWxUYXJnZXRzOiBTd2FsUGFydGlhbFRhcmdldHMsIHN3YWxDb21wb25lbnQ6IFN3YWxDb21wb25lbnQpO1xuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgdG8gdGhlIHRoZSBTd2VldCBBbGVydCBhcHBlYXJhbmNlL2Rpc2FwcGVhcmFuY2UgdG8gY3JlYXRlL2Rlc3Ryb3kgdGhlIFN3YWxQYXJ0aWFsQ29tcG9uZW50IHRoYXQgd2lsbFxuICAgICAqIHJlY2VpdmUgdGhlIGNvbnN1bWVyJ3MgdGVtcGxhdGUuXG4gICAgICovXG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBVbnN1YnNjcmliZXMgZnJvbSB0aGUgU3dlZXQgQWxlcnQgYXBwZWFyYW5jZS9kaXNhcHBlYXJhbmNlLlxuICAgICAqL1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG4iXX0=