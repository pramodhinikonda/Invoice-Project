{"version":3,"sources":["ng://@sweetalert2/ngx-sweetalert2/swal-partial-targets.ts","node_modules/tslib/tslib.es6.js","ng://@sweetalert2/ngx-sweetalert2/di.ts","ng://@sweetalert2/ngx-sweetalert2/swal.component.ts","ng://@sweetalert2/ngx-sweetalert2/swal.directive.ts","ng://@sweetalert2/ngx-sweetalert2/swal-partial.component.ts","ng://@sweetalert2/ngx-sweetalert2/swal-partial.directive.ts","ng://@sweetalert2/ngx-sweetalert2/sweetalert2.module.ts"],"names":["this","title","Swal","getTitle","content","getContent","actions","getActions","confirmButton","getConfirmButton","cancelButton","getCancelButton","footer","getFooter","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","SwalDefaults","InjectionToken","swalDefaultsProvider","options","provide","useValue","SwalComponent","defineProperty","_this","touchedProps","forEach","prop","keys","markTouched","ngOnChanges","changes","filter","ngOnDestroy","isCurrentlyShown","close","show","defaultSwalOptions","onBeforeOpen","modalElement","beforeOpen","emit","onOpen","open","onClose","promise","fire","useRejections","then","result","confirm","value","cancel","dismiss","err","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","Inject","Input","Output","EventEmitter","nativeSwal","Set","add","bind","SwalDirective","swalInstance","Array","isArray","swalOptions","argsToParams","ngOnInit","factory","resolver","resolveComponentFactory","swalRef","viewContainerRef","createComponent","instance","destroy","onHostClicked","event","preventDefault","stopImmediatePropagation","stopPropagation","confirmSub","asObservable","subscribe","v","cancelSub","unsubscribe","Directive","ViewContainerRef","ComponentFactoryResolver","HostListener","SwalPartialComponent","SwalPartialDirective","beforeOpenSubscription","swalComponent","targetEl","swalPartial","swalTargets","partialRef","create","injector","templateRef","app","attachView","hostView","closeSubscription","detachView","Injector","ApplicationRef","TemplateRef","SwalPartialTargets","decorators","type","Host","SweetAlert2Module","forRoot","ngModule","providers","NgModule","declarations","imports","CommonModule","exports","entryComponents"],"mappings":"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","sourcesContent":["import Swal from 'sweetalert2';\n\n/**\n * Represents an object of targets for <swal> partials (use with *swalPartial directive).\n * We must use thunks to access the Swal.* functions listed below, because they get created after the first modal is\n * shown, so this object lets us reference those functions safely and in a statically-typed manner.\n */\nexport class SwalPartialTargets {\n    public readonly title = () => Swal.getTitle();\n\n    public readonly content = () => Swal.getContent();\n\n    public readonly actions = () => Swal.getActions();\n\n    public readonly confirmButton = () => Swal.getConfirmButton();\n\n    public readonly cancelButton = () => Swal.getCancelButton();\n\n    public readonly footer = () => Swal.getFooter();\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { InjectionToken, Provider } from '@angular/core';\nimport { SweetAlertOptions } from 'sweetalert2';\n\nexport const SwalDefaults = new InjectionToken<SweetAlertOptions>('SwalDefaults');\n\nexport function swalDefaultsProvider(options: SweetAlertOptions = {}): Provider {\n    return {\n        provide: SwalDefaults,\n        useValue: options\n    };\n}\n","import {\n    ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, OnChanges, OnDestroy, Output, SimpleChanges\n} from '@angular/core';\nimport Swal, { SweetAlertOptions } from 'sweetalert2';\nimport { SwalDefaults } from './di';\nimport * as events from './swal-events';\n\n/**\n * <swal> component. See the README.md for usage.\n *\n * It contains a bunch of @Inputs that have a perfect 1:1 mapping with SweetAlert2 options.\n * Their types are directly coming from SweetAlert2 types defintitions, meaning that ngx-sweetalert2 is tightly coupled\n * to SweetAlert2, but also is type-safe.\n *\n * /!\\ Some SweetAlert options aren't @Inputs but @Outputs: onBeforeOpen, onOpen, and onClose (without \"on*\" prefix).\n *     However, preConfirm and inputValidtor are still @Inputs because there are not event handlers, there can't be\n *     multiple listeners and we need the Promise they must return.\n *\n * /!\\ You can notice that the SweetAlert2 `useRejections` and `expectRejections` are the only one to not have\n *     an @Input(). That's because they are deprecated and not using the default value of these parameters leads to\n *     clunky control flow. They are supported (use [options]=\"{}\"), but please don't use them.\n */\n@Component({\n    selector: 'swal',\n    template: '',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalComponent implements OnChanges, OnDestroy {\n    // If Swal gets more than a hundred props, I'll write a code generator, I promise.\n    // And I always resolve() my promises.\n    @Input() public title: SweetAlertOptions['title'];\n    @Input() public titleText: SweetAlertOptions['titleText'];\n    @Input() public text: SweetAlertOptions['text'];\n    @Input() public html: SweetAlertOptions['html'];\n    @Input() public footer: SweetAlertOptions['footer'];\n    @Input() public type: SweetAlertOptions['type'];\n    @Input() public backdrop: SweetAlertOptions['backdrop'];\n    @Input() public toast: SweetAlertOptions['toast'];\n    @Input() public target: SweetAlertOptions['target'];\n    @Input() public input: SweetAlertOptions['input'];\n    @Input() public width: SweetAlertOptions['width'];\n    @Input() public padding: SweetAlertOptions['padding'];\n    @Input() public background: SweetAlertOptions['background'];\n    @Input() public position: SweetAlertOptions['position'];\n    @Input() public grow: SweetAlertOptions['grow'];\n    @Input() public customClass: SweetAlertOptions['customClass'];\n    @Input() public timer: SweetAlertOptions['timer'];\n    @Input() public animation: SweetAlertOptions['animation'];\n    @Input() public allowOutsideClick: SweetAlertOptions['allowOutsideClick'];\n    @Input() public allowEscapeKey: SweetAlertOptions['allowEscapeKey'];\n    @Input() public allowEnterKey: SweetAlertOptions['allowEnterKey'];\n    @Input() public showConfirmButton: SweetAlertOptions['showConfirmButton'];\n    @Input() public showCancelButton: SweetAlertOptions['showCancelButton'];\n    @Input() public confirmButtonText: SweetAlertOptions['confirmButtonText'];\n    @Input() public cancelButtonText: SweetAlertOptions['cancelButtonText'];\n    @Input() public confirmButtonColor: SweetAlertOptions['confirmButtonColor'];\n    @Input() public cancelButtonColor: SweetAlertOptions['cancelButtonColor'];\n    @Input() public confirmButtonClass: SweetAlertOptions['confirmButtonClass'];\n    @Input() public cancelButtonClass: SweetAlertOptions['cancelButtonClass'];\n    @Input() public confirmButtonAriaLabel: SweetAlertOptions['confirmButtonAriaLabel'];\n    @Input() public cancelButtonAriaLabel: SweetAlertOptions['cancelButtonAriaLabel'];\n    @Input() public buttonsStyling: SweetAlertOptions['buttonsStyling'];\n    @Input() public reverseButtons: SweetAlertOptions['reverseButtons'];\n    @Input() public focusConfirm: SweetAlertOptions['focusConfirm'];\n    @Input() public focusCancel: SweetAlertOptions['focusCancel'];\n    @Input() public showCloseButton: SweetAlertOptions['showCloseButton'];\n    @Input() public closeButtonAriaLabel: SweetAlertOptions['closeButtonAriaLabel'];\n    @Input() public showLoaderOnConfirm: SweetAlertOptions['showLoaderOnConfirm'];\n    @Input() public preConfirm: SweetAlertOptions['preConfirm'];\n    @Input() public imageUrl: SweetAlertOptions['imageUrl'];\n    @Input() public imageWidth: SweetAlertOptions['imageWidth'];\n    @Input() public imageHeight: SweetAlertOptions['imageHeight'];\n    @Input() public imageAlt: SweetAlertOptions['imageAlt'];\n    @Input() public imageClass: SweetAlertOptions['imageClass'];\n    @Input() public inputPlaceholder: SweetAlertOptions['inputPlaceholder'];\n    @Input() public inputValue: SweetAlertOptions['inputValue'];\n    @Input() public inputOptions: SweetAlertOptions['inputOptions'];\n    @Input() public inputAutoTrim: SweetAlertOptions['inputAutoTrim'];\n    @Input() public inputAttributes: SweetAlertOptions['inputAttributes'];\n    @Input() public inputValidator: SweetAlertOptions['inputValidator'];\n    @Input() public inputClass: SweetAlertOptions['inputClass'];\n    @Input() public progressSteps: SweetAlertOptions['progressSteps'];\n    @Input() public currentProgressStep: SweetAlertOptions['currentProgressStep'];\n    @Input() public progressStepsDistance: SweetAlertOptions['progressStepsDistance'];\n\n    /**\n     * Emits a BeforeOpenEvent when the modal DOM element has been created.\n     * Useful to perform DOM mutations before the modal is shown.\n     */\n    @Output() public readonly beforeOpen = new EventEmitter<events.BeforeOpenEvent>();\n\n    /**\n     * Emits an OpenEvent when the modal is shown.\n     */\n    @Output() public readonly open = new EventEmitter<events.OpenEvent>();\n\n    /**\n     * Emits a CloseEvent when modal get closed.\n     */\n    @Output() public readonly close = new EventEmitter<events.CloseEvent>();\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output() public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n     * value of a rejected \"preConfirm\".\n     *\n     * Example:\n     *     public handleCancel(reason: string): void {\n     *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n     *         // ... do something\n     *     }\n     */\n    @Output() public readonly cancel = new EventEmitter<any>();\n\n    /**\n     * An object of SweetAlert2 native options, useful if:\n     *  - you don't want to use the @Inputs for practical/philosophical reasons ;\n     *  - there are missing @Inputs because ngx-sweetalert2 isn't up-to-date with SweetAlert2's latest changes.\n     *\n     * /!\\ Be aware that the options defined in this object will override the @Inputs of the same name.\n     */\n    @Input() public set options(options: SweetAlertOptions) {\n        Object.assign(this, options);\n        Object.keys(options).forEach(this.markTouched);\n    }\n\n    public get options(): SweetAlertOptions {\n        const options: SweetAlertOptions = {};\n\n        //=> We will compute the options object based on the option keys that are known to have changed.\n        // That avoids passing a gigantic object to SweetAlert2, making debugging easier and potentially avoiding\n        // side effects.\n        this.touchedProps.forEach(prop => {\n            options[prop] = (this as { [prop: string]: any })[prop];\n        });\n\n        return options;\n    }\n\n    public nativeSwal = Swal;\n\n    private isCurrentlyShown = false;\n\n    private readonly touchedProps = new Set<keyof SweetAlertOptions>();\n\n    private readonly markTouched = this.touchedProps.add.bind(this.touchedProps);\n\n    public constructor(@Inject(SwalDefaults) private readonly defaultSwalOptions: SweetAlertOptions) {\n        //=> Force `this` scope of show() on this component\n        //   Useful for doing things like (click)=\"mySwal.show()\".\n        this.show = this.show.bind(this);\n    }\n\n    public ngOnChanges(changes: SimpleChanges): void {\n        Object.keys(changes)\n            .filter(prop => prop !== 'options')\n            .forEach(this.markTouched);\n    }\n\n    public ngOnDestroy(): void {\n        if (this.isCurrentlyShown) {\n            Swal.close();\n        }\n    }\n\n    /**\n     * Shows the SweetAlert.\n     *\n     * Returns the SweetAlert2 promise for convenience and use in code behind templates.\n     * Otherwise, (confirm)=\"myHandler($event)\" and (cancel)=\"myHandler($event)\" can be used in templates.\n     */\n    public show(): Promise<any> {\n        //=> Build the SweetAlert2 options\n        const options: SweetAlertOptions = {\n            //=> Merge with the default module-level options\n            ...this.defaultSwalOptions,\n\n            //=> Merge with calculated options set for that specific swal\n            ...this.options,\n\n            //=> Handle modal lifecycle events\n            onBeforeOpen: (modalElement) => {\n                this.beforeOpen.emit({ modalElement });\n            },\n\n            onOpen: (modalElement) => {\n                this.isCurrentlyShown = true;\n                this.open.emit({ modalElement });\n            },\n\n            onClose: (modalElement) => {\n                this.isCurrentlyShown = false;\n                this.close.emit({ modalElement });\n            }\n        };\n\n        //=> Show the Swal!\n        const promise = Swal.fire(options);\n\n        //=> Handle (confirm) and (cancel) @Outputs\n        // tslint:disable-next-line:no-string-literal\n        const useRejections = (options as { useRejections?: boolean }).useRejections;\n\n        promise.then(\n            result => {\n                if (useRejections) {\n                    this.confirm.emit(result);\n                } else if ('value' in result) {\n                    this.confirm.emit(result.value);\n                } else {\n                    this.cancel.emit(result.dismiss);\n                }\n            },\n            err => {\n                if (useRejections) {\n                    this.cancel.emit(err);\n                }\n            }\n        );\n\n        //=> Return the unaltered promise\n        return promise;\n    }\n}\n","import {\n    ComponentFactoryResolver, ComponentRef, Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output,\n    ViewContainerRef\n} from '@angular/core';\nimport Swal, { SweetAlertArrayOptions, SweetAlertOptions } from 'sweetalert2';\nimport { SwalComponent } from './swal.component';\n\n/**\n * [swal] directive. It takes a value that defines the Sweet Alert and can be of three types:\n *\n * 1) A simple array of two or three strings defining [title, text, type] - the type being optional, ex:\n *\n *    <button [swal]=\"['Title', 'Text']\">Click me</button>\n *\n * 2) A native SweetAlert2 options object, ex:\n *\n *    <button [swal]=\"{ title: 'Title', text: 'Text' }\">Click me</button>\n *\n * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:\n *\n *    <button [swal]=\"mySwal\">Click me</button>\n *    <swal #mySwal title=\"Title\" text=\"Text\"></swal>\n */\n@Directive({\n    selector: '[swal]'\n})\nexport class SwalDirective implements OnInit, OnDestroy {\n    /**\n     * SweetAlert2 options or a SwalComponent instance.\n     * See the class doc block for more informations.\n     */\n    @Input() public set swal(options: SwalComponent | SweetAlertOptions | SweetAlertArrayOptions) {\n        if (options instanceof SwalComponent) {\n            this.swalInstance = options;\n        } else if (Array.isArray(options)) {\n            this.swalOptions = Swal.argsToParams(options);\n        } else {\n            this.swalOptions = options;\n        }\n    }\n\n    /**\n     * Emits when the user clicks \"Confirm\".\n     * Bears a value when using \"input\", resolved \"preConfirm\", etc.\n     *\n     * Example:\n     *     public handleConfirm(email: string): void {\n     *         // ... save user email\n     *     }\n     */\n    @Output() public readonly confirm = new EventEmitter<any>();\n\n    /**\n     * Emits when the user clicks \"Cancel\" (or dismisses the modal by any other way).\n     * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the\n     * value of a rejected \"preConfirm\".\n     *\n     * Example:\n     *     public handleCancel(reason: string): void {\n     *         // reason can be 'cancel', 'overlay', 'close', and 'timer'\n     *         // ... do something\n     *     }\n     */\n    @Output() public readonly cancel = new EventEmitter<any>();\n\n    /**\n     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object\n     * options to it.\n     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.\n     */\n    private swalRef: ComponentRef<SwalComponent>;\n\n    /**\n     * An instance of the <swal> component that this directive controls.\n     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.\n     */\n    private swalInstance: SwalComponent;\n\n    /**\n     * Holds the native SweetAlert2 options.\n     * Empty when the user passed an existing SwalComponent instance.\n     */\n    private swalOptions: SweetAlertOptions;\n\n    public constructor(\n        private readonly viewContainerRef: ViewContainerRef,\n        private readonly resolver: ComponentFactoryResolver) {\n    }\n\n    /**\n     * OnInit lifecycle handler.\n     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and\n     * (cancel) outputs to reemit on the directive.\n     */\n    public ngOnInit(): void {\n        if (!this.swalInstance) {\n            const factory = this.resolver.resolveComponentFactory(SwalComponent);\n\n            this.swalRef = this.viewContainerRef.createComponent(factory);\n            this.swalInstance = this.swalRef.instance;\n        }\n    }\n\n    /**\n     * OnDestroy lifecycle handler.\n     * Destroys the dynamically-created SwalComponent and unsubscribes from that component's (confirm) and (cancel).\n     */\n    public ngOnDestroy(): void {\n        if (this.swalRef) {\n            this.swalRef.destroy();\n        }\n    }\n\n    /**\n     * Click handler.\n     * The directive listens for onclick events on its host element.\n     * When this happens, it shows the <swal> attached to this directive.\n     */\n    @HostListener('click', ['$event'])\n    public onHostClicked(event: MouseEvent): void {\n        event.preventDefault();\n        event.stopImmediatePropagation();\n        event.stopPropagation();\n\n        if (this.swalOptions) {\n            this.swalInstance.options = this.swalOptions;\n        }\n\n        const confirmSub = this.swalInstance.confirm.asObservable().subscribe(v => this.confirm.emit(v));\n        const cancelSub = this.swalInstance.cancel.asObservable().subscribe(v => this.cancel.emit(v));\n\n        this.swalInstance.show().then(unsubscribe);\n\n        function unsubscribe() {\n            confirmSub.unsubscribe();\n            cancelSub.unsubscribe();\n        }\n    }\n}\n","import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';\n\n/**\n * @internal\n * Holds a consumer's Angular template and displays it on a Sweet Alert.\n * See SwalPartialDirective for info about the covered feature.\n */\n@Component({\n    template: '<ng-container *ngTemplateOutlet=\"template\"></ng-container>',\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SwalPartialComponent {\n    @Input() public template: TemplateRef<any>;\n}\n","import {\n    ApplicationRef, ComponentFactoryResolver, ComponentRef, Directive, Host, Injector, Input, OnDestroy, OnInit,\n    TemplateRef\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { SwalPartialTargets } from './swal-partial-targets';\nimport { SwalPartialComponent } from './swal-partial.component';\nimport { SwalComponent } from './swal.component';\n\n/**\n * A structural directive that lets you use Angular templates inside of Sweet Alerts.\n * There are different targetable zones in a Sweet Alert: title, content, confirmButton, cancelButton, buttonsWrapper.\n * The default target is the content zone.\n *\n * Usage in your component's TypeScript code-behind (if you use another target than \"content\"):\n *\n *     @Component({ ... })\n *     export class MyComponent {\n *         public constructor(public readonly swalTargets: SwalPartialTargets) {\n *         }\n *     }\n *\n * Usage in the template:\n *\n *     <swal title=\"Fill the form\" (confirm)=\"confirmHandler()\">\n *         <!-- This form will be displayed as the alert main content\n *              Targets the alert's main content zone by default -->\n *         <form *swalPartial [formControl]=\"myForm\">\n *             ...\n *         </form>\n *\n *         <!-- This targets the confirm button's inner content\n *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->\n *         <ng-container *swalPartial=\"swalTargets.confirmButton\">\n *              Send ({{ secondsLeft }} seconds left)\n *         </ng-container>\n *     <swal>\n */\n@Directive({\n    selector: '[swalPartial]'\n})\nexport class SwalPartialDirective implements OnInit, OnDestroy {\n    /**\n     * Takes a \"partial target\" or nothing (will target main content zone by default).\n     *\n     * See the {@link SwalPartialTargets} service to see the available targets.\n     * See the class doc block for more informations.\n     */\n    @Input() public swalPartial: () => HTMLElement;\n\n    /**\n     * Holds the component reference of the controlled SwalPartialComponent to destroy it when no longer needed.\n     */\n    private partialRef: ComponentRef<SwalPartialComponent>;\n\n    private beforeOpenSubscription: Subscription;\n    private closeSubscription: Subscription;\n\n    constructor(\n        private readonly resolver: ComponentFactoryResolver,\n        private readonly injector: Injector,\n        private readonly app: ApplicationRef,\n        private readonly templateRef: TemplateRef<any>,\n        private readonly swalTargets: SwalPartialTargets,\n        @Host() private readonly swalComponent: SwalComponent) {\n    }\n\n    /**\n     * Subscribes to the the Sweet Alert appearance/disappearance to create/destroy the SwalPartialComponent that will\n     * receive the consumer's template.\n     */\n    public ngOnInit(): void {\n        this.beforeOpenSubscription = this.swalComponent.beforeOpen.asObservable().subscribe(() => {\n            //=> Create the SwalPartialComponent on the target DOM node in the Sweet Alert\n            const targetEl = this.swalPartial ? this.swalPartial() : this.swalTargets.content();\n            const factory = this.resolver.resolveComponentFactory(SwalPartialComponent);\n\n            this.partialRef = factory.create(this.injector, [], targetEl);\n\n            //=> Apply the consumer's template on the component\n            this.partialRef.instance.template = this.templateRef;\n\n            //=> Make the Angular app aware of that detached view so change detection works\n            this.app.attachView(this.partialRef.hostView);\n        });\n\n        this.closeSubscription = this.swalComponent.close.asObservable().subscribe(() => {\n            //=> Detach the partial component from the app and destroy it\n            this.app.detachView(this.partialRef.hostView);\n            this.partialRef.destroy();\n        });\n    }\n\n    /**\n     * Unsubscribes from the Sweet Alert appearance/disappearance.\n     */\n    public ngOnDestroy(): void {\n        this.beforeOpenSubscription.unsubscribe();\n        this.closeSubscription.unsubscribe();\n    }\n}\n","import { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { SweetAlertOptions } from 'sweetalert2';\nimport { swalDefaultsProvider } from './di';\nimport { SwalPartialTargets } from './swal-partial-targets';\nimport { SwalPartialComponent } from './swal-partial.component';\nimport { SwalPartialDirective } from './swal-partial.directive';\nimport { SwalComponent } from './swal.component';\nimport { SwalDirective } from './swal.directive';\n\n@NgModule({\n    declarations: [\n        SwalComponent, SwalPartialDirective, SwalPartialComponent,\n        SwalDirective\n    ],\n    providers: [\n        SwalPartialTargets\n    ],\n    imports: [\n        CommonModule\n    ],\n    exports: [\n        SwalComponent, SwalPartialDirective,\n        SwalDirective\n    ],\n    entryComponents: [\n        SwalComponent, SwalPartialComponent\n    ]\n})\nexport class SweetAlert2Module {\n    public static forRoot(defaultSwalOptions?: SweetAlertOptions): ModuleWithProviders {\n        return {\n            ngModule: SweetAlert2Module,\n            providers: [swalDefaultsProvider(defaultSwalOptions)]\n        };\n    }\n}\n"]}