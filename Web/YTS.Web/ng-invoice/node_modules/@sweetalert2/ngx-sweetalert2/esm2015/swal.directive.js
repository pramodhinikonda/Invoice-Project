/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Directive, EventEmitter, HostListener, Input, Output, ViewContainerRef } from '@angular/core';
import Swal from 'sweetalert2';
import { SwalComponent } from './swal.component';
/**
 * [swal] directive. It takes a value that defines the Sweet Alert and can be of three types:
 *
 * 1) A simple array of two or three strings defining [title, text, type] - the type being optional, ex:
 *
 *    <button [swal]="['Title', 'Text']">Click me</button>
 *
 * 2) A native SweetAlert2 options object, ex:
 *
 *    <button [swal]="{ title: 'Title', text: 'Text' }">Click me</button>
 *
 * 3) A reference to an existing SwalComponent instance for more advanced uses, ex:
 *
 *    <button [swal]="mySwal">Click me</button>
 *    <swal #mySwal title="Title" text="Text"></swal>
 */
export class SwalDirective {
    /**
     * @param {?} viewContainerRef
     * @param {?} resolver
     */
    constructor(viewContainerRef, resolver) {
        this.viewContainerRef = viewContainerRef;
        this.resolver = resolver;
        /**
         * Emits when the user clicks "Confirm".
         * Bears a value when using "input", resolved "preConfirm", etc.
         *
         * Example:
         *     public handleConfirm(email: string): void {
         *         // ... save user email
         *     }
         */
        this.confirm = new EventEmitter();
        /**
         * Emits when the user clicks "Cancel" (or dismisses the modal by any other way).
         * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the
         * value of a rejected "preConfirm".
         *
         * Example:
         *     public handleCancel(reason: string): void {
         *         // reason can be 'cancel', 'overlay', 'close', and 'timer'
         *         // ... do something
         *     }
         */
        this.cancel = new EventEmitter();
    }
    /**
     * SweetAlert2 options or a SwalComponent instance.
     * See the class doc block for more informations.
     * @param {?} options
     * @return {?}
     */
    set swal(options) {
        if (options instanceof SwalComponent) {
            this.swalInstance = options;
        }
        else if (Array.isArray(options)) {
            this.swalOptions = Swal.argsToParams(options);
        }
        else {
            this.swalOptions = options;
        }
    }
    /**
     * OnInit lifecycle handler.
     * Creates a SwalComponent instance if the user didn't provided one and binds on that component (confirm) and
     * (cancel) outputs to reemit on the directive.
     * @return {?}
     */
    ngOnInit() {
        if (!this.swalInstance) {
            /** @type {?} */
            const factory = this.resolver.resolveComponentFactory(SwalComponent);
            this.swalRef = this.viewContainerRef.createComponent(factory);
            this.swalInstance = this.swalRef.instance;
        }
    }
    /**
     * OnDestroy lifecycle handler.
     * Destroys the dynamically-created SwalComponent and unsubscribes from that component's (confirm) and (cancel).
     * @return {?}
     */
    ngOnDestroy() {
        if (this.swalRef) {
            this.swalRef.destroy();
        }
    }
    /**
     * Click handler.
     * The directive listens for onclick events on its host element.
     * When this happens, it shows the <swal> attached to this directive.
     * @param {?} event
     * @return {?}
     */
    onHostClicked(event) {
        event.preventDefault();
        event.stopImmediatePropagation();
        event.stopPropagation();
        if (this.swalOptions) {
            this.swalInstance.options = this.swalOptions;
        }
        /** @type {?} */
        const confirmSub = this.swalInstance.confirm.asObservable().subscribe(v => this.confirm.emit(v));
        /** @type {?} */
        const cancelSub = this.swalInstance.cancel.asObservable().subscribe(v => this.cancel.emit(v));
        this.swalInstance.show().then(unsubscribe);
        /**
         * @return {?}
         */
        function unsubscribe() {
            confirmSub.unsubscribe();
            cancelSub.unsubscribe();
        }
    }
}
SwalDirective.decorators = [
    { type: Directive, args: [{
                selector: '[swal]'
            },] }
];
/** @nocollapse */
SwalDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver }
];
SwalDirective.propDecorators = {
    swal: [{ type: Input }],
    confirm: [{ type: Output }],
    cancel: [{ type: Output }],
    onHostClicked: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /**
     * Emits when the user clicks "Confirm".
     * Bears a value when using "input", resolved "preConfirm", etc.
     *
     * Example:
     *     public handleConfirm(email: string): void {
     *         // ... save user email
     *     }
     * @type {?}
     */
    SwalDirective.prototype.confirm;
    /**
     * Emits when the user clicks "Cancel" (or dismisses the modal by any other way).
     * By default, it will emit a string representing the reason for which the SweetAlert has been closed, or the
     * value of a rejected "preConfirm".
     *
     * Example:
     *     public handleCancel(reason: string): void {
     *         // reason can be 'cancel', 'overlay', 'close', and 'timer'
     *         // ... do something
     *     }
     * @type {?}
     */
    SwalDirective.prototype.cancel;
    /**
     * When the user does not provides a SwalComponent instance, we create it on-the-fly and assign the plain-object
     * options to it.
     * This fields keeps a reference to the dynamically-created <swal>, to destroy it along this directive instance.
     * @type {?}
     */
    SwalDirective.prototype.swalRef;
    /**
     * An instance of the <swal> component that this directive controls.
     * Could be an instance passed by the user, otherwise it's the instance we've dynamically created.
     * @type {?}
     */
    SwalDirective.prototype.swalInstance;
    /**
     * Holds the native SweetAlert2 options.
     * Empty when the user passed an existing SwalComponent instance.
     * @type {?}
     */
    SwalDirective.prototype.swalOptions;
    /** @type {?} */
    SwalDirective.prototype.viewContainerRef;
    /** @type {?} */
    SwalDirective.prototype.resolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dhbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac3dlZXRhbGVydDIvbmd4LXN3ZWV0YWxlcnQyLyIsInNvdXJjZXMiOlsic3dhbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCx3QkFBd0IsRUFBZ0IsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQy9HLGdCQUFnQixFQUNuQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLElBQW1ELE1BQU0sYUFBYSxDQUFDO0FBQzlFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQmpELE1BQU0sT0FBTyxhQUFhOzs7OztJQTBEdEIsWUFDcUIsZ0JBQWtDLEVBQ2xDLFFBQWtDO1FBRGxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDbEMsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7Ozs7Ozs7Ozs7UUFwQzdCLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDOzs7Ozs7Ozs7Ozs7UUFhbEMsV0FBTSxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7SUF3QjNELENBQUM7Ozs7Ozs7SUF4REQsSUFBb0IsSUFBSSxDQUFDLE9BQW1FO1FBQ3hGLElBQUksT0FBTyxZQUFZLGFBQWEsRUFBRTtZQUNsQyxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQztTQUMvQjthQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMvQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDakQ7YUFBTTtZQUNILElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDO1NBQzlCO0lBQ0wsQ0FBQzs7Ozs7OztJQXVETSxRQUFRO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7O2tCQUNkLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLGFBQWEsQ0FBQztZQUVwRSxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDOUQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztTQUM3QztJQUNMLENBQUM7Ozs7OztJQU1NLFdBQVc7UUFDZCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZCxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQzFCO0lBQ0wsQ0FBQzs7Ozs7Ozs7SUFRTSxhQUFhLENBQUMsS0FBaUI7UUFDbEMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLEtBQUssQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO1FBQ2pDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUV4QixJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUNoRDs7Y0FFSyxVQUFVLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7O2NBQzFGLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUU3RixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQzs7OztRQUUzQyxTQUFTLFdBQVc7WUFDaEIsVUFBVSxDQUFDLFdBQVcsRUFBRSxDQUFDO1lBQ3pCLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUM1QixDQUFDO0lBQ0wsQ0FBQzs7O1lBbEhKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsUUFBUTthQUNyQjs7OztZQXZCRyxnQkFBZ0I7WUFEaEIsd0JBQXdCOzs7bUJBOEJ2QixLQUFLO3NCQW1CTCxNQUFNO3FCQWFOLE1BQU07NEJBdUROLFlBQVksU0FBQyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7Ozs7Ozs7Ozs7SUFwRWpDLGdDQUE0RDs7Ozs7Ozs7Ozs7OztJQWE1RCwrQkFBMkQ7Ozs7Ozs7SUFPM0QsZ0NBQTZDOzs7Ozs7SUFNN0MscUNBQW9DOzs7Ozs7SUFNcEMsb0NBQXVDOztJQUduQyx5Q0FBbUQ7O0lBQ25ELGlDQUFtRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBDb21wb25lbnRSZWYsIERpcmVjdGl2ZSwgRXZlbnRFbWl0dGVyLCBIb3N0TGlzdGVuZXIsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0LFxuICAgIFZpZXdDb250YWluZXJSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgU3dhbCwgeyBTd2VldEFsZXJ0QXJyYXlPcHRpb25zLCBTd2VldEFsZXJ0T3B0aW9ucyB9IGZyb20gJ3N3ZWV0YWxlcnQyJztcbmltcG9ydCB7IFN3YWxDb21wb25lbnQgfSBmcm9tICcuL3N3YWwuY29tcG9uZW50JztcblxuLyoqXG4gKiBbc3dhbF0gZGlyZWN0aXZlLiBJdCB0YWtlcyBhIHZhbHVlIHRoYXQgZGVmaW5lcyB0aGUgU3dlZXQgQWxlcnQgYW5kIGNhbiBiZSBvZiB0aHJlZSB0eXBlczpcbiAqXG4gKiAxKSBBIHNpbXBsZSBhcnJheSBvZiB0d28gb3IgdGhyZWUgc3RyaW5ncyBkZWZpbmluZyBbdGl0bGUsIHRleHQsIHR5cGVdIC0gdGhlIHR5cGUgYmVpbmcgb3B0aW9uYWwsIGV4OlxuICpcbiAqICAgIDxidXR0b24gW3N3YWxdPVwiWydUaXRsZScsICdUZXh0J11cIj5DbGljayBtZTwvYnV0dG9uPlxuICpcbiAqIDIpIEEgbmF0aXZlIFN3ZWV0QWxlcnQyIG9wdGlvbnMgb2JqZWN0LCBleDpcbiAqXG4gKiAgICA8YnV0dG9uIFtzd2FsXT1cInsgdGl0bGU6ICdUaXRsZScsIHRleHQ6ICdUZXh0JyB9XCI+Q2xpY2sgbWU8L2J1dHRvbj5cbiAqXG4gKiAzKSBBIHJlZmVyZW5jZSB0byBhbiBleGlzdGluZyBTd2FsQ29tcG9uZW50IGluc3RhbmNlIGZvciBtb3JlIGFkdmFuY2VkIHVzZXMsIGV4OlxuICpcbiAqICAgIDxidXR0b24gW3N3YWxdPVwibXlTd2FsXCI+Q2xpY2sgbWU8L2J1dHRvbj5cbiAqICAgIDxzd2FsICNteVN3YWwgdGl0bGU9XCJUaXRsZVwiIHRleHQ9XCJUZXh0XCI+PC9zd2FsPlxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1tzd2FsXSdcbn0pXG5leHBvcnQgY2xhc3MgU3dhbERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICAvKipcbiAgICAgKiBTd2VldEFsZXJ0MiBvcHRpb25zIG9yIGEgU3dhbENvbXBvbmVudCBpbnN0YW5jZS5cbiAgICAgKiBTZWUgdGhlIGNsYXNzIGRvYyBibG9jayBmb3IgbW9yZSBpbmZvcm1hdGlvbnMuXG4gICAgICovXG4gICAgQElucHV0KCkgcHVibGljIHNldCBzd2FsKG9wdGlvbnM6IFN3YWxDb21wb25lbnQgfCBTd2VldEFsZXJ0T3B0aW9ucyB8IFN3ZWV0QWxlcnRBcnJheU9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgaW5zdGFuY2VvZiBTd2FsQ29tcG9uZW50KSB7XG4gICAgICAgICAgICB0aGlzLnN3YWxJbnN0YW5jZSA9IG9wdGlvbnM7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvcHRpb25zKSkge1xuICAgICAgICAgICAgdGhpcy5zd2FsT3B0aW9ucyA9IFN3YWwuYXJnc1RvUGFyYW1zKG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zd2FsT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbWl0cyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBcIkNvbmZpcm1cIi5cbiAgICAgKiBCZWFycyBhIHZhbHVlIHdoZW4gdXNpbmcgXCJpbnB1dFwiLCByZXNvbHZlZCBcInByZUNvbmZpcm1cIiwgZXRjLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiAgICAgcHVibGljIGhhbmRsZUNvbmZpcm0oZW1haWw6IHN0cmluZyk6IHZvaWQge1xuICAgICAqICAgICAgICAgLy8gLi4uIHNhdmUgdXNlciBlbWFpbFxuICAgICAqICAgICB9XG4gICAgICovXG4gICAgQE91dHB1dCgpIHB1YmxpYyByZWFkb25seSBjb25maXJtID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XG5cbiAgICAvKipcbiAgICAgKiBFbWl0cyB3aGVuIHRoZSB1c2VyIGNsaWNrcyBcIkNhbmNlbFwiIChvciBkaXNtaXNzZXMgdGhlIG1vZGFsIGJ5IGFueSBvdGhlciB3YXkpLlxuICAgICAqIEJ5IGRlZmF1bHQsIGl0IHdpbGwgZW1pdCBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIHJlYXNvbiBmb3Igd2hpY2ggdGhlIFN3ZWV0QWxlcnQgaGFzIGJlZW4gY2xvc2VkLCBvciB0aGVcbiAgICAgKiB2YWx1ZSBvZiBhIHJlamVjdGVkIFwicHJlQ29uZmlybVwiLlxuICAgICAqXG4gICAgICogRXhhbXBsZTpcbiAgICAgKiAgICAgcHVibGljIGhhbmRsZUNhbmNlbChyZWFzb246IHN0cmluZyk6IHZvaWQge1xuICAgICAqICAgICAgICAgLy8gcmVhc29uIGNhbiBiZSAnY2FuY2VsJywgJ292ZXJsYXknLCAnY2xvc2UnLCBhbmQgJ3RpbWVyJ1xuICAgICAqICAgICAgICAgLy8gLi4uIGRvIHNvbWV0aGluZ1xuICAgICAqICAgICB9XG4gICAgICovXG4gICAgQE91dHB1dCgpIHB1YmxpYyByZWFkb25seSBjYW5jZWwgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhlIHVzZXIgZG9lcyBub3QgcHJvdmlkZXMgYSBTd2FsQ29tcG9uZW50IGluc3RhbmNlLCB3ZSBjcmVhdGUgaXQgb24tdGhlLWZseSBhbmQgYXNzaWduIHRoZSBwbGFpbi1vYmplY3RcbiAgICAgKiBvcHRpb25zIHRvIGl0LlxuICAgICAqIFRoaXMgZmllbGRzIGtlZXBzIGEgcmVmZXJlbmNlIHRvIHRoZSBkeW5hbWljYWxseS1jcmVhdGVkIDxzd2FsPiwgdG8gZGVzdHJveSBpdCBhbG9uZyB0aGlzIGRpcmVjdGl2ZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBwcml2YXRlIHN3YWxSZWY6IENvbXBvbmVudFJlZjxTd2FsQ29tcG9uZW50PjtcblxuICAgIC8qKlxuICAgICAqIEFuIGluc3RhbmNlIG9mIHRoZSA8c3dhbD4gY29tcG9uZW50IHRoYXQgdGhpcyBkaXJlY3RpdmUgY29udHJvbHMuXG4gICAgICogQ291bGQgYmUgYW4gaW5zdGFuY2UgcGFzc2VkIGJ5IHRoZSB1c2VyLCBvdGhlcndpc2UgaXQncyB0aGUgaW5zdGFuY2Ugd2UndmUgZHluYW1pY2FsbHkgY3JlYXRlZC5cbiAgICAgKi9cbiAgICBwcml2YXRlIHN3YWxJbnN0YW5jZTogU3dhbENvbXBvbmVudDtcblxuICAgIC8qKlxuICAgICAqIEhvbGRzIHRoZSBuYXRpdmUgU3dlZXRBbGVydDIgb3B0aW9ucy5cbiAgICAgKiBFbXB0eSB3aGVuIHRoZSB1c2VyIHBhc3NlZCBhbiBleGlzdGluZyBTd2FsQ29tcG9uZW50IGluc3RhbmNlLlxuICAgICAqL1xuICAgIHByaXZhdGUgc3dhbE9wdGlvbnM6IFN3ZWV0QWxlcnRPcHRpb25zO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHZpZXdDb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcikge1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uSW5pdCBsaWZlY3ljbGUgaGFuZGxlci5cbiAgICAgKiBDcmVhdGVzIGEgU3dhbENvbXBvbmVudCBpbnN0YW5jZSBpZiB0aGUgdXNlciBkaWRuJ3QgcHJvdmlkZWQgb25lIGFuZCBiaW5kcyBvbiB0aGF0IGNvbXBvbmVudCAoY29uZmlybSkgYW5kXG4gICAgICogKGNhbmNlbCkgb3V0cHV0cyB0byByZWVtaXQgb24gdGhlIGRpcmVjdGl2ZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgbmdPbkluaXQoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5zd2FsSW5zdGFuY2UpIHtcbiAgICAgICAgICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KFN3YWxDb21wb25lbnQpO1xuXG4gICAgICAgICAgICB0aGlzLnN3YWxSZWYgPSB0aGlzLnZpZXdDb250YWluZXJSZWYuY3JlYXRlQ29tcG9uZW50KGZhY3RvcnkpO1xuICAgICAgICAgICAgdGhpcy5zd2FsSW5zdGFuY2UgPSB0aGlzLnN3YWxSZWYuaW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPbkRlc3Ryb3kgbGlmZWN5Y2xlIGhhbmRsZXIuXG4gICAgICogRGVzdHJveXMgdGhlIGR5bmFtaWNhbGx5LWNyZWF0ZWQgU3dhbENvbXBvbmVudCBhbmQgdW5zdWJzY3JpYmVzIGZyb20gdGhhdCBjb21wb25lbnQncyAoY29uZmlybSkgYW5kIChjYW5jZWwpLlxuICAgICAqL1xuICAgIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuc3dhbFJlZikge1xuICAgICAgICAgICAgdGhpcy5zd2FsUmVmLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsaWNrIGhhbmRsZXIuXG4gICAgICogVGhlIGRpcmVjdGl2ZSBsaXN0ZW5zIGZvciBvbmNsaWNrIGV2ZW50cyBvbiBpdHMgaG9zdCBlbGVtZW50LlxuICAgICAqIFdoZW4gdGhpcyBoYXBwZW5zLCBpdCBzaG93cyB0aGUgPHN3YWw+IGF0dGFjaGVkIHRvIHRoaXMgZGlyZWN0aXZlLlxuICAgICAqL1xuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcbiAgICBwdWJsaWMgb25Ib3N0Q2xpY2tlZChldmVudDogTW91c2VFdmVudCk6IHZvaWQge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBldmVudC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3dhbE9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMuc3dhbEluc3RhbmNlLm9wdGlvbnMgPSB0aGlzLnN3YWxPcHRpb25zO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29uZmlybVN1YiA9IHRoaXMuc3dhbEluc3RhbmNlLmNvbmZpcm0uYXNPYnNlcnZhYmxlKCkuc3Vic2NyaWJlKHYgPT4gdGhpcy5jb25maXJtLmVtaXQodikpO1xuICAgICAgICBjb25zdCBjYW5jZWxTdWIgPSB0aGlzLnN3YWxJbnN0YW5jZS5jYW5jZWwuYXNPYnNlcnZhYmxlKCkuc3Vic2NyaWJlKHYgPT4gdGhpcy5jYW5jZWwuZW1pdCh2KSk7XG5cbiAgICAgICAgdGhpcy5zd2FsSW5zdGFuY2Uuc2hvdygpLnRoZW4odW5zdWJzY3JpYmUpO1xuXG4gICAgICAgIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgY29uZmlybVN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgY2FuY2VsU3ViLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=