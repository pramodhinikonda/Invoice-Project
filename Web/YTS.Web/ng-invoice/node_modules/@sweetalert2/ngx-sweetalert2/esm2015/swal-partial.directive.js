/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { ApplicationRef, ComponentFactoryResolver, Directive, Host, Injector, Input, TemplateRef } from '@angular/core';
import { SwalPartialTargets } from './swal-partial-targets';
import { SwalPartialComponent } from './swal-partial.component';
import { SwalComponent } from './swal.component';
/**
 * A structural directive that lets you use Angular templates inside of Sweet Alerts.
 * There are different targetable zones in a Sweet Alert: title, content, confirmButton, cancelButton, buttonsWrapper.
 * The default target is the content zone.
 *
 * Usage in your component's TypeScript code-behind (if you use another target than "content"):
 *
 * \@Component({ ... })
 *     export class MyComponent {
 *         public constructor(public readonly swalTargets: SwalPartialTargets) {
 *         }
 *     }
 *
 * Usage in the template:
 *
 *     <swal title="Fill the form" (confirm)="confirmHandler()">
 *         <!-- This form will be displayed as the alert main content
 *              Targets the alert's main content zone by default -->
 *         <form *swalPartial [formControl]="myForm">
 *             ...
 *         </form>
 *
 *         <!-- This targets the confirm button's inner content
 *              Notice the usage of ng-container to avoid creating an useless DOM element inside the button -->
 *         <ng-container *swalPartial="swalTargets.confirmButton">
 *              Send ({{ secondsLeft }} seconds left)
 *         </ng-container>
 *     <swal>
 */
export class SwalPartialDirective {
    /**
     * @param {?} resolver
     * @param {?} injector
     * @param {?} app
     * @param {?} templateRef
     * @param {?} swalTargets
     * @param {?} swalComponent
     */
    constructor(resolver, injector, app, templateRef, swalTargets, swalComponent) {
        this.resolver = resolver;
        this.injector = injector;
        this.app = app;
        this.templateRef = templateRef;
        this.swalTargets = swalTargets;
        this.swalComponent = swalComponent;
    }
    /**
     * Subscribes to the the Sweet Alert appearance/disappearance to create/destroy the SwalPartialComponent that will
     * receive the consumer's template.
     * @return {?}
     */
    ngOnInit() {
        this.beforeOpenSubscription = this.swalComponent.beforeOpen.asObservable().subscribe(() => {
            //=> Create the SwalPartialComponent on the target DOM node in the Sweet Alert
            /** @type {?} */
            const targetEl = this.swalPartial ? this.swalPartial() : this.swalTargets.content();
            /** @type {?} */
            const factory = this.resolver.resolveComponentFactory(SwalPartialComponent);
            this.partialRef = factory.create(this.injector, [], targetEl);
            //=> Apply the consumer's template on the component
            this.partialRef.instance.template = this.templateRef;
            //=> Make the Angular app aware of that detached view so change detection works
            this.app.attachView(this.partialRef.hostView);
        });
        this.closeSubscription = this.swalComponent.close.asObservable().subscribe(() => {
            //=> Detach the partial component from the app and destroy it
            this.app.detachView(this.partialRef.hostView);
            this.partialRef.destroy();
        });
    }
    /**
     * Unsubscribes from the Sweet Alert appearance/disappearance.
     * @return {?}
     */
    ngOnDestroy() {
        this.beforeOpenSubscription.unsubscribe();
        this.closeSubscription.unsubscribe();
    }
}
SwalPartialDirective.decorators = [
    { type: Directive, args: [{
                selector: '[swalPartial]'
            },] }
];
/** @nocollapse */
SwalPartialDirective.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ApplicationRef },
    { type: TemplateRef },
    { type: SwalPartialTargets },
    { type: SwalComponent, decorators: [{ type: Host }] }
];
SwalPartialDirective.propDecorators = {
    swalPartial: [{ type: Input }]
};
if (false) {
    /**
     * Takes a "partial target" or nothing (will target main content zone by default).
     *
     * See the {\@link SwalPartialTargets} service to see the available targets.
     * See the class doc block for more informations.
     * @type {?}
     */
    SwalPartialDirective.prototype.swalPartial;
    /**
     * Holds the component reference of the controlled SwalPartialComponent to destroy it when no longer needed.
     * @type {?}
     */
    SwalPartialDirective.prototype.partialRef;
    /** @type {?} */
    SwalPartialDirective.prototype.beforeOpenSubscription;
    /** @type {?} */
    SwalPartialDirective.prototype.closeSubscription;
    /** @type {?} */
    SwalPartialDirective.prototype.resolver;
    /** @type {?} */
    SwalPartialDirective.prototype.injector;
    /** @type {?} */
    SwalPartialDirective.prototype.app;
    /** @type {?} */
    SwalPartialDirective.prototype.templateRef;
    /** @type {?} */
    SwalPartialDirective.prototype.swalTargets;
    /** @type {?} */
    SwalPartialDirective.prototype.swalComponent;
}
//# sourceMappingURL=data:application/json;base64,